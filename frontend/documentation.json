{
    "pipes": [],
    "interfaces": [
        {
            "name": "Counts",
            "id": "interface-Counts-ce0af648a811922df45594f93a54d0a916f872a616f6925e1c2de32672534900e499b1820a7a5a897ab6f2b9960693e355e5bdced533244513683a7fb0a6439a",
            "file": "src/app/components/planning-session/result-view/result-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { User } from 'src/app/model/session';\r\n\r\n@Component({\r\n  selector: 'app-result-view',\r\n  templateUrl: './result-view.component.html',\r\n  styleUrls: ['./result-view.component.css']\r\n})\r\nexport class ResultViewComponent implements OnInit {\r\n\r\n  @Input() users: User[];\r\n  @Input() choices: string[];\r\n  @Input() colors: string[];\r\n\r\n  public data: any = {\r\n    labels: [],\r\n    datasets: [\r\n        {\r\n            data: [],\r\n            backgroundColor: [],\r\n            hoverBackgroundColor: []\r\n        }]\r\n    };\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    const cnt: Counts[] = [];\r\n    this.users.forEach(u => {\r\n      let temp = cnt.find(c => c.value === u.vote);\r\n      if (! temp) {\r\n        temp = { value: u.vote, label: u.vote + ' SP', count: 0 };\r\n        cnt.push(temp);\r\n      }\r\n      temp.count++;\r\n    });\r\n\r\n    const labels = cnt.map(c => c.label + ` (${c.count}x)`);\r\n    const data = cnt.map(c => c.count);\r\n    this.data.labels = labels;\r\n    this.data.datasets[0].label = 'cnt';\r\n    this.data.datasets[0].data = data;\r\n    this.data.datasets[0].backgroundColor = this.colors;\r\n    this.data.datasets[0].hoverBackgroundColor = this.colors;\r\n  }\r\n\r\n}\r\n\r\ninterface Counts {\r\n  value: string;\r\n  label: string;\r\n  count: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HandlerSelection",
            "id": "interface-HandlerSelection-53804faae040100ab2dfc267f2af24d66675981ecf573d7f727dca82c9b6d1592d2c01ff17f1ab1a1d722710c59de3af3e9a258f2664163759aaacaa49257afc",
            "file": "src/app/service/websocket.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\r\nimport { WsMessage } from '../model/message';\r\nimport { StatusService } from './status.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebsocketService {\r\n\r\n  private socket$: WebSocketSubject<WsMessage>;\r\n  private wsEndpoint: string;\r\n  private handlers: HandlerSelection[] = [];\r\n  private thereHasBeenContact = false;\r\n\r\n  private defaultMessageHandler = this.defaultHandler.bind(this);\r\n  private defaultActions = ['pong', 'ERROR', 'INIT'];\r\n\r\n  constructor(private statusService: StatusService) {\r\n  }\r\n\r\n  public send(message: WsMessage): void {\r\n    if (!this.socket$ || this.socket$.closed) {\r\n      console.log('The connection has closed!!');\r\n    }\r\n    this.socket$.next(message);\r\n  }\r\n\r\n  public connect(): void {\r\n    if (!this.socket$ || this.socket$.closed) {\r\n      let handled = false;\r\n      this.socket$ = webSocket(this.wsEndpoint);\r\n      this.socket$.subscribe(\r\n        (data) => {\r\n          console.log(`Action received; ${data.action}`);\r\n          this.thereHasBeenContact = true;\r\n          this.handlers.forEach(h => {\r\n            if (h.sessionId && h.sessionId === data.sessionId) {\r\n              if (h.actions.includes(data.action)) {\r\n                handled = true;\r\n                h.handler(data);\r\n              }\r\n            }\r\n          });\r\n          if (! handled) {\r\n            if (this.defaultActions.includes(data.action)) {\r\n              this.defaultMessageHandler(data);\r\n            } else {\r\n              console.log(`Action ${data.action} could not be handled!!`);\r\n            }\r\n          }\r\n        },\r\n        (err) => console.error('Recieved error: %O', err),\r\n        () => console.log('Session completed'),\r\n      );\r\n      setInterval(this.checkToSentPing.bind(this), 60000);\r\n    } else {\r\n      console.log('Connection already existed');\r\n    }\r\n  }\r\n\r\n  public init(handler, sessionId: string, actions: string[], docHRef: string): void {\r\n    this.handlers.push({ actions, sessionId, handler} as HandlerSelection);\r\n    this.wsEndpoint = docHRef.replace('http', 'ws');\r\n    this.wsEndpoint = this.wsEndpoint.substring(0, this.wsEndpoint.indexOf('/', 10));\r\n    this.wsEndpoint = this.wsEndpoint + '/stream';\r\n    this.connect();\r\n  }\r\n\r\n  private defaultHandler(message: WsMessage): void {\r\n    switch (message.action) {\r\n      case 'pong' : console.log('Pong received'); break;\r\n      case 'ERROR': this.processErrorMessage(message); break;\r\n      case 'INIT': { this.statusService.$status.next(`Websocket connection established`); break; }\r\n      default: console.log(`Unknown message action (${message.action} received.)`);\r\n    }\r\n  }\r\n  private processErrorMessage(message: WsMessage): void {\r\n    console.log(`Error ${message.payload}`);\r\n  }\r\n  private checkToSentPing(): void {\r\n    if (this.thereHasBeenContact) {\r\n      this.thereHasBeenContact = false;\r\n    } else {\r\n      this.send({ action: 'ping', sessionId: '0', userId: -1 } as WsMessage);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface HandlerSelection {\r\n  actions: string[];\r\n  sessionId?: string;\r\n  handler: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "handler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "sessionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 92
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Message",
            "id": "interface-Message-65656189c146de844504db297410115800d39e9111c53bc7604096a20f4a7dbc8a7eae4330ba1400ef10831d167a6be635dc315a60717d19d3226f97dadabdc2",
            "file": "src/app/components/messages-view/messages-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-messages-view',\r\n  templateUrl: './messages-view.component.html',\r\n  styleUrls: ['./messages-view.component.css']\r\n})\r\nexport class MessagesViewComponent implements OnInit {\r\n\r\n  @Input() messageReceived: Observable<string >;\r\n  @Output() messageEntered = new EventEmitter<string>();\r\n\r\n  public message = '';\r\n  public messages: Message[] = [];\r\n  private interval: any;\r\n\r\n\r\n  constructor(){ }\r\n\r\n  ngOnInit(): void {\r\n    this.messageReceived.subscribe(\r\n      data => this.messages = [ { message: data, timeEntered: Date.now()}, ...this.messages ]\r\n    );\r\n    this.interval = setInterval(() => this.messages = this.messages.filter(m => (Date.now() - m.timeEntered) < 90000 ), 60000);\r\n  }\r\n\r\n  public addMessage(): void {\r\n    this.messageEntered.emit(this.message);\r\n  }\r\n\r\n}\r\ninterface Message {\r\n  message: string;\r\n  timeEntered: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "timeEntered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MoodboardStatus",
            "id": "interface-MoodboardStatus-6d0c855f7c7c0164ce7fcd899ba2d72d6902776b43dc65f35d5c4c79aa9aa361100065caa07728571779910c899a7943d42178772610dcb8cc70fbe66fe0fbf3",
            "file": "src/app/model/retrospective-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RetrospectiveColumnData {\r\n  title: string;\r\n  column: number;\r\n  notes: RetrospectiveNote[];\r\n}\r\n\r\nexport interface RetrospectiveNote {\r\n  id: number;\r\n  col: number;\r\n  txt: string;\r\n  userId?: number;\r\n  votes?: number;\r\n}\r\nexport interface MoodboardStatus {\r\n  display: boolean;\r\n  values: number[];\r\n}\r\n\r\nexport interface MoodboardUpdate {\r\n  display: boolean;\r\n  arraySize: number;\r\n  previousvalue?: number;\r\n  currentValue?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MoodboardUpdate",
            "id": "interface-MoodboardUpdate-6d0c855f7c7c0164ce7fcd899ba2d72d6902776b43dc65f35d5c4c79aa9aa361100065caa07728571779910c899a7943d42178772610dcb8cc70fbe66fe0fbf3",
            "file": "src/app/model/retrospective-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RetrospectiveColumnData {\r\n  title: string;\r\n  column: number;\r\n  notes: RetrospectiveNote[];\r\n}\r\n\r\nexport interface RetrospectiveNote {\r\n  id: number;\r\n  col: number;\r\n  txt: string;\r\n  userId?: number;\r\n  votes?: number;\r\n}\r\nexport interface MoodboardStatus {\r\n  display: boolean;\r\n  values: number[];\r\n}\r\n\r\nexport interface MoodboardUpdate {\r\n  display: boolean;\r\n  arraySize: number;\r\n  previousvalue?: number;\r\n  currentValue?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arraySize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "previousvalue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NotesToMerge",
            "id": "interface-NotesToMerge-282ee2123471a1556c91c2b46017f806e3cddb0fada39278b482f070439831f2df05748dea198a57157c2ac3a75ee908a921da348f57e64c8bfe9cdc894a2c5e",
            "file": "src/app/model/notes-to-merge.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NotesToMerge {\r\n  baseNoteId: number;\r\n  note2MergeId: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "baseNoteId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "note2MergeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RetrospectiveColumnData",
            "id": "interface-RetrospectiveColumnData-6d0c855f7c7c0164ce7fcd899ba2d72d6902776b43dc65f35d5c4c79aa9aa361100065caa07728571779910c899a7943d42178772610dcb8cc70fbe66fe0fbf3",
            "file": "src/app/model/retrospective-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RetrospectiveColumnData {\r\n  title: string;\r\n  column: number;\r\n  notes: RetrospectiveNote[];\r\n}\r\n\r\nexport interface RetrospectiveNote {\r\n  id: number;\r\n  col: number;\r\n  txt: string;\r\n  userId?: number;\r\n  votes?: number;\r\n}\r\nexport interface MoodboardStatus {\r\n  display: boolean;\r\n  values: number[];\r\n}\r\n\r\nexport interface MoodboardUpdate {\r\n  display: boolean;\r\n  arraySize: number;\r\n  previousvalue?: number;\r\n  currentValue?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RetrospectiveNote[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RetrospectiveNote",
            "id": "interface-RetrospectiveNote-6d0c855f7c7c0164ce7fcd899ba2d72d6902776b43dc65f35d5c4c79aa9aa361100065caa07728571779910c899a7943d42178772610dcb8cc70fbe66fe0fbf3",
            "file": "src/app/model/retrospective-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RetrospectiveColumnData {\r\n  title: string;\r\n  column: number;\r\n  notes: RetrospectiveNote[];\r\n}\r\n\r\nexport interface RetrospectiveNote {\r\n  id: number;\r\n  col: number;\r\n  txt: string;\r\n  userId?: number;\r\n  votes?: number;\r\n}\r\nexport interface MoodboardStatus {\r\n  display: boolean;\r\n  values: number[];\r\n}\r\n\r\nexport interface MoodboardUpdate {\r\n  display: boolean;\r\n  arraySize: number;\r\n  previousvalue?: number;\r\n  currentValue?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "col",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "txt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "votes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Session",
            "id": "interface-Session-021f11d03c49e5018035d584d2a0899cee4eda0e4c5e08d8ea0eaf30947b5b03ce39e056e87f4ae313458de112893c6dd09f36af7870d9763fa7aac82250404a",
            "file": "src/app/model/session.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Session {\r\n    id: string;\r\n    type: SessionType;\r\n    user: User;\r\n    phase?: string;\r\n    users: User[];\r\n}\r\n\r\nexport interface User {\r\n    id: number;\r\n    name: string;\r\n    role: string;\r\n    vote?: string;\r\n}\r\nexport interface UserVotes {\r\n    userid: number;\r\n    vote: string;\r\n}\r\nexport enum SessionType {\r\n    UNKNOWN = 'UNKNOWN',\r\n    REFINEMENT = 'REFINEMENT',\r\n    RETROSPECTIVE = 'RETROSPECTIVE'\r\n}\r\n// export interface UserInfo {\r\n//     id: number;\r\n//     name: string;\r\n//     vote?: string;\r\n//     role: string;\r\n// }\r\nexport enum Role {\r\n    Unknown = 'Unknown',\r\n    ScrumMaster = 'ScrumMaster',\r\n    TeamMember = 'TeamMember'\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "phase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SessionType",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SessionInfo",
            "id": "interface-SessionInfo-68c5f7133ca6be6296a07ac4fe0f16483c73d2c54edb47100e838e4e64325ae301bb9a65e0ab82d55ba86d9025d393d46fa8ee04c0908233ead535c759a7837d",
            "file": "src/app/model/session-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SessionInfo {\r\n    username: string;\r\n    sessionId: string;\r\n    state: SessionConnectType;\r\n}\r\nexport enum SessionConnectType {\r\n    NEW='New',\r\n    EXISTING='Existing'\r\n}",
            "properties": [
                {
                    "name": "sessionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SessionConnectType",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SessionResponse",
            "id": "interface-SessionResponse-038715068838662a0115294cc0b1ac0735148412d21610468012586892f27db0a1b259a0d79d8b694a7a66cd120f9ab13dc8c24886f2c827b9dae1a0e88814d1",
            "file": "src/app/service/session.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Session, SessionType, User } from '../model/session';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SessionService {\r\n  private sessionUrl = '/rest/session';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  sessionCreate(username: string, sessionType: SessionType): Observable<Session> {\r\n    const body = { name: username, type: sessionType };\r\n    return this.http.post<SessionResponse>(this.sessionUrl, body)\r\n    .pipe(\r\n      map( postResponse => {\r\n        // tslint:disable-next-line:max-line-length\r\n        return  {id: postResponse.id, type: sessionType, user: postResponse.user, users: [] } as Session;\r\n      }),\r\n       catchError(this.handleError<boolean>('sessionCreate', false)));\r\n  }\r\n  joinSession(sessionType: SessionType, sessionId: string, username: string): Observable<Session> {\r\n    return this.http.post<SessionResponse>(`${this.sessionUrl}/${sessionId}`, { name: username, sessionType })\r\n    .pipe(\r\n      map( postResponse => {\r\n        // tslint:disable-next-line:max-line-length\r\n        return  {id: postResponse.id, type: sessionType, user: postResponse.user, users: [] } as Session;\r\n      }),\r\n       catchError(this.handleError<boolean>('joinSession', false)));\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n     private handleError<T>(operation = 'operation', result?: T): any {\r\n      return (error: any): Observable<T> => {\r\n\r\n        // TODO: send the error to remote logging infrastructure\r\n        console.error(error);\r\n\r\n        // TODO: better job of transforming error for user consumption\r\n        console.log(`${operation} failed: ${error.message}`);\r\n\r\n        // Let the app keep running by returning an empty result.\r\n        return of(result as T);\r\n      };\r\n    }\r\n  }\r\ninterface SessionResponse {\r\n  id: string;\r\n  type: SessionType;\r\n  user: User;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SessionType",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-021f11d03c49e5018035d584d2a0899cee4eda0e4c5e08d8ea0eaf30947b5b03ce39e056e87f4ae313458de112893c6dd09f36af7870d9763fa7aac82250404a",
            "file": "src/app/model/session.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Session {\r\n    id: string;\r\n    type: SessionType;\r\n    user: User;\r\n    phase?: string;\r\n    users: User[];\r\n}\r\n\r\nexport interface User {\r\n    id: number;\r\n    name: string;\r\n    role: string;\r\n    vote?: string;\r\n}\r\nexport interface UserVotes {\r\n    userid: number;\r\n    vote: string;\r\n}\r\nexport enum SessionType {\r\n    UNKNOWN = 'UNKNOWN',\r\n    REFINEMENT = 'REFINEMENT',\r\n    RETROSPECTIVE = 'RETROSPECTIVE'\r\n}\r\n// export interface UserInfo {\r\n//     id: number;\r\n//     name: string;\r\n//     vote?: string;\r\n//     role: string;\r\n// }\r\nexport enum Role {\r\n    Unknown = 'Unknown',\r\n    ScrumMaster = 'ScrumMaster',\r\n    TeamMember = 'TeamMember'\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "vote",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc-1",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "UserVotes",
            "id": "interface-UserVotes-021f11d03c49e5018035d584d2a0899cee4eda0e4c5e08d8ea0eaf30947b5b03ce39e056e87f4ae313458de112893c6dd09f36af7870d9763fa7aac82250404a",
            "file": "src/app/model/session.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Session {\r\n    id: string;\r\n    type: SessionType;\r\n    user: User;\r\n    phase?: string;\r\n    users: User[];\r\n}\r\n\r\nexport interface User {\r\n    id: number;\r\n    name: string;\r\n    role: string;\r\n    vote?: string;\r\n}\r\nexport interface UserVotes {\r\n    userid: number;\r\n    vote: string;\r\n}\r\nexport enum SessionType {\r\n    UNKNOWN = 'UNKNOWN',\r\n    REFINEMENT = 'REFINEMENT',\r\n    RETROSPECTIVE = 'RETROSPECTIVE'\r\n}\r\n// export interface UserInfo {\r\n//     id: number;\r\n//     name: string;\r\n//     vote?: string;\r\n//     role: string;\r\n// }\r\nexport enum Role {\r\n    Unknown = 'Unknown',\r\n    ScrumMaster = 'ScrumMaster',\r\n    TeamMember = 'TeamMember'\r\n}\r\n",
            "properties": [
                {
                    "name": "userid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "vote",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "WsMessage",
            "id": "interface-WsMessage-479aa7452472046e3d2720fd935781e4f17dc0a97a316d8f84687c0f95b7e4271faa4f79fb11ba7aeb4fd7326e01d4a51d8bc3008d50f82b2695a61b3eca250d",
            "file": "src/app/model/message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Session } from './session';\r\n\r\nexport interface WsMessage {\r\n  action: string;\r\n  sessionId: string;\r\n  userId: number;\r\n  payload?: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sessionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MessageServiceMock",
            "id": "injectable-MessageServiceMock-a6d803f46028d9b5222d89634be66078cfb8d7b27b489396c9c35e6984cc5706b61fb1bb281742df090a468cea24f05143dd1fe103ee6ef4110ec2e84a421081",
            "file": "src/stories/mocks/MessageServiceMock.ts",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addAll",
                    "args": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Message } from 'primeng/api';\nimport { Injectable } from '@angular/core';\n@Injectable({\n    providedIn: 'root'\n  })\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport class MessageServiceMock {\n    add(message: Message): void {\n      console.log('MessageServiceMock.add()')\n    }\n    addAll(messages: Message[]): void {\n      console.log('MessageServiceMock.addAll()')\n    }\n    clear(key?: string): void {\n      console.log('MessageServiceMock.clear()')\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "RetroSessionService",
            "id": "injectable-RetroSessionService-7380cb13ba719ded2d38fa626bec87c566e8618054eb7d1694b9d8ac30780bccb9af42897901542099486a50b54a8829ba117ec9da80167667f480d0ca3b0823",
            "file": "src/app/service/retro-session.service.ts",
            "properties": [
                {
                    "name": "actions",
                    "defaultValue": "['UpdateRetroSession', 'NewMessage', 'InitRetrospective', 'UpdateNote', 'DeleteNote', 'StatusMoodboard']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "availableVotes",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "columnData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RetrospectiveColumnData[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "draggedMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RetrospectiveNote",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "inSession",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "moodboardCounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "moodboardSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "newMessage",
                    "defaultValue": "new BehaviorSubject<string>('Status...')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "processMessage",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "session",
                    "defaultValue": "{id: null, type: SessionType.UNKNOWN, user: {id: null, name: null, role: null, vote: null}, phase: null,  users: []}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Session",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showMoodboard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addMessage",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNewMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNote",
                    "args": [
                        {
                            "name": "colId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDraggedMessageId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUsersFromMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "User[]",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initRetrospective",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "joinSession",
                    "args": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mergeNotes",
                    "args": [
                        {
                            "name": "notes2Merge",
                            "type": "NotesToMerge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "notes2Merge",
                            "type": "NotesToMerge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moodboardStatus",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moodboardStatusUpdate",
                    "args": [
                        {
                            "name": "countSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "countSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "myMoodSelection",
                    "args": [
                        {
                            "name": "selection",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetDraggedMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendDeleteNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendEditNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendUpdatedNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDraggedMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateNote",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserlist",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "voted",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SessionService } from './session.service';\r\nimport { WebsocketService } from './websocket.service';\r\nimport { WsMessage } from '../model/message';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { NotesToMerge } from 'src/app/model/notes-to-merge';\r\n\r\nimport { RetrospectiveColumnData, RetrospectiveNote, MoodboardStatus, MoodboardUpdate } from '../model/retrospective-data';\r\nimport { User, SessionType, Session, Role } from '../model/session';\r\nimport { SessionInfo } from 'src/app/model/session-info';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RetroSessionService {\r\n\r\n  public newMessage: Subject<string> = new BehaviorSubject<string>('Status...');\r\n\r\n  columnData: RetrospectiveColumnData[] = [];\r\n\r\n  public inSession = false;\r\n  public session: Session =\r\n      {id: null, type: SessionType.UNKNOWN, user: {id: null, name: null, role: null, vote: null}, phase: null,  users: []};\r\n  public availableVotes = 5;\r\n\r\n  public showMoodboard = false;\r\n  public moodboardSelected: number;\r\n  public moodboardCounts: number[] = [];\r\n\r\n  draggedMessage: RetrospectiveNote;\r\n\r\n  private actions: string[] = ['UpdateRetroSession', 'NewMessage', 'InitRetrospective', 'UpdateNote', 'DeleteNote', 'StatusMoodboard'];\r\n\r\n\r\n  constructor(private sessionService: SessionService,\r\n              private websocketService: WebsocketService) { }\r\n\r\n  public joinSession(sessionInfo: SessionInfo): Observable<boolean> {\r\n    return this.sessionService.joinSession(SessionType.RETROSPECTIVE, sessionInfo.sessionId, sessionInfo.username).pipe(\r\n      map(session => {\r\n        if (session) {\r\n          this.inSession = true;\r\n          this.session = JSON.parse(JSON.stringify(session));\r\n          this.websocketService.init(this.processMessage, this.session.id, this.actions, document.location.href);\r\n          const wsMessage: WsMessage = { action: 'JoinSession', sessionId: this.session.id, userId: this.session.user.id };\r\n          this.websocketService.send(wsMessage);\r\n        } else {\r\n          this.inSession = false;\r\n        }\r\n        return this.inSession;\r\n      }),\r\n      catchError(() => {\r\n        this.inSession = false;\r\n        this.session = undefined;\r\n        return of(this.inSession);\r\n      })\r\n    );\r\n  }\r\n  public createSession(sessionInfo: SessionInfo): Observable<boolean> {\r\n    return this.sessionService.sessionCreate(sessionInfo.username, SessionType.RETROSPECTIVE).pipe(\r\n      map(session => {\r\n        this.inSession = true;\r\n        this.session = JSON.parse(JSON.stringify(session));\r\n        const handler = (this.processMessage).bind(this);\r\n        this.websocketService.init(handler, this.session.id, this.actions, document.location.href);\r\n        const wsMessage: WsMessage = { action: 'JoinSession', sessionId: this.session.id, userId: this.session.user.id, payload: `Joining session ${this.session.id}` };\r\n        this.websocketService.send(wsMessage);\r\n        return true;\r\n      }),\r\n      catchError(() => {\r\n        this.inSession = false;\r\n        this.session = undefined;\r\n        return of(this.inSession);\r\n      })\r\n    );\r\n  }\r\n  public addMessage($event): void {\r\n    const wsMessage: WsMessage = { action: 'AddMessage', sessionId: this.session.id, userId: this.session.user.id, payload: $event };\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n  public moodboardStatusUpdate(countSize: number): void {\r\n    const moodboardUpdate: MoodboardUpdate = {display: !this.showMoodboard, arraySize: countSize};\r\n    const wsMessage: WsMessage = { action: 'UpdateMoodboard'\r\n        , sessionId: this.session.id, userId: this.session.user.id, payload: moodboardUpdate };\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n  public voted($event): void {\r\n    this.availableVotes--;\r\n    this.sendUpdatedNote($event);\r\n  }\r\n\r\n  public setDraggedMessage(message: RetrospectiveNote): void {\r\n    this.draggedMessage = message;\r\n  }\r\n  public getDraggedMessageId(): number {\r\n    if (this.draggedMessage) {\r\n      return this.draggedMessage.id;\r\n    }\r\n    return undefined;\r\n  }\r\n  public resetDraggedMessage(): void {\r\n    this.draggedMessage = undefined;\r\n  }\r\n\r\n  processMessage = (message: WsMessage) => {\r\n    switch (message.action) {\r\n      case 'UpdateRetroSession': this.updateUserlist(message); break;\r\n      case 'NewMessage': this.addNewMessage(message); break;\r\n      case 'InitRetrospective': this.initRetrospective(message); break;\r\n      case 'UpdateNote': this.updateNote(message); break;\r\n      case 'DeleteNote': this.deleteNote(message); break;\r\n      case 'StatusMoodboard': this.moodboardStatus(message); break;\r\n      default: console.log(`RetroSessionComponent.processMessage: Unknown message action (${message.action}) received.`);\r\n    }\r\n  }\r\n  private moodboardStatus(message: WsMessage): void {\r\n    const mbStatus = message.payload as MoodboardStatus;\r\n    this.showMoodboard = mbStatus.display;\r\n    this.moodboardCounts = mbStatus.values;\r\n  }\r\n  private updateUserlist(message: WsMessage): void {\r\n    this.session.users = this.getUsersFromMessage(message);\r\n    if (! this.session.user.role) {\r\n      this.session.user.role = this.session.users.find(u => u.id === this.session.user.id).role;\r\n    }\r\n  }\r\n  private getUsersFromMessage(message: WsMessage): User[] {\r\n    return (message.payload as User[]).map(u => ({ name: u.name, role: u.role, vote: null, id: u.id })).sort((u1, u2) => {\r\n      if (u1.name > u2.name) { return 1; }\r\n      if (u1.name < u2.name) { return -1; }\r\n      return 0;\r\n    });\r\n  }\r\n  private addNewMessage(message: WsMessage): void {\r\n    this.newMessage.next(message.payload);\r\n  }\r\n  private initRetrospective(message: WsMessage): void {\r\n    this.columnData = (message.payload as RetrospectiveColumnData[]);\r\n  }\r\n  private updateNote(message: WsMessage): void {\r\n    const note = (message.payload as RetrospectiveNote);\r\n    const columnData = this.columnData.find(colData => colData.column === note.col).notes;\r\n    if (columnData.find(n => n.id === note.id)) {\r\n      const index = columnData.findIndex(n => n.id === note.id);\r\n      columnData.splice(index, 1, note);\r\n    } else {\r\n      columnData.push(note);\r\n    }\r\n  }\r\n  private deleteNote(message: WsMessage): void {\r\n    const note = (message.payload as RetrospectiveNote);\r\n    const columnData = this.columnData.find(colData => colData.column === note.col).notes;\r\n    const index = columnData.findIndex(n => n.id === note.id);\r\n    columnData.splice(index, 1);\r\n  }\r\n\r\n  addNote(colId: number): void {\r\n    const wsMessage: WsMessage = { action: 'AddNote', sessionId: this.session.id, userId: this.session.user.id, payload:  colId};\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n  sendUpdatedNote(note: RetrospectiveNote): void {\r\n    const wsMessage: WsMessage = { action: 'UpdateNote', sessionId: this.session.id, userId: this.session.user.id, payload:  note};\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n  sendEditNote(note: RetrospectiveNote): void {\r\n    const wsMessage: WsMessage = { action: 'EditNote', sessionId: this.session.id, userId: this.session.user.id, payload:  note};\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n  sendDeleteNote(note: RetrospectiveNote): void {\r\n    const wsMessage: WsMessage = { action: 'DeleteNote', sessionId: this.session.id, userId: this.session.user.id, payload:  note};\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n  mergeNotes(notes2Merge: NotesToMerge): void {\r\n    const wsMessage: WsMessage = { action: 'MergeNotes', sessionId: this.session.id, userId: this.session.user.id, payload:  notes2Merge};\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    return this.session.user.role === Role.ScrumMaster;\r\n  }\r\n\r\n  myMoodSelection(selection: number): void {\r\n    const moodboardUpdate: MoodboardUpdate = {display: this.showMoodboard, arraySize: this.moodboardCounts.length\r\n      , previousvalue: this.moodboardSelected, currentValue: selection};\r\n    const wsMessage: WsMessage = { action: 'UpdateMoodboard'\r\n        , sessionId: this.session.id, userId: this.session.user.id, payload: moodboardUpdate };\r\n    this.moodboardSelected = selection;\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScrumCookieService",
            "id": "injectable-ScrumCookieService-76d566e6be134845120fc91867debf20c08e861335b50cdd911a07754ce4bbd12d3a0a20358eeaa98cda38641808158e57ea9ac1c8917f73fdbba3a62568539f",
            "file": "src/app/service/scrum-cookie.service.ts",
            "properties": [
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "usernameCookie",
                    "defaultValue": "'scrumUser'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUsername",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCookies",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "usingUsername",
                    "args": [
                        {
                            "name": "usernameNow",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "usernameNow",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScrumCookieService {\n  private usernameCookie = 'scrumUser';\n\n  private username: string;\n\n  constructor(private cookieService: CookieService) {\n    this.username = this.cookieService.get(this.usernameCookie);\n  }\n\n  removeCookies(): void {\n    this.cookieService.deleteAll();\n  }\n\n  getUsername(): string {\n    return this.username;\n  }\n\n  usingUsername(usernameNow: string): void {\n    if (usernameNow !== this.username) {\n      this.username = usernameNow;\n      console.log(`Username set to ${this.username}`);\n      this.cookieService.set(this.usernameCookie, this.username, 365);\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScrumCookieServiceMock",
            "id": "injectable-ScrumCookieServiceMock-9f739d27a2a75d6fe7361390771d575f74c043fe5fd8b10535c660bb26d60a8596ecd5c4e041dd63c78e5716f57836f6e94ca5ccd1f2d593c1a1bb0ce92ed147",
            "file": "src/stories/mocks/SrcumCookieServiceMock.ts",
            "properties": [
                {
                    "name": "username",
                    "defaultValue": "'testuser'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUsername",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setUsername",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n@Injectable({\n    providedIn: 'root'\n  })\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport class ScrumCookieServiceMock {\n\n  private username = 'testuser';\n\n  setUsername(name: string) {\n    console.log(`ScrumCookieServiceMock.setUsername('${name}')`);\n    this.username = name;\n  }\n\n  getUsername(): string {\n    console.log('ScrumCookieServiceMock.getUsername()');\n    return this.username;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "SessionService",
            "id": "injectable-SessionService-038715068838662a0115294cc0b1ac0735148412d21610468012586892f27db0a1b259a0d79d8b694a7a66cd120f9ab13dc8c24886f2c827b9dae1a0e88814d1",
            "file": "src/app/service/session.service.ts",
            "properties": [
                {
                    "name": "sessionUrl",
                    "defaultValue": "'/rest/session'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle Http operation that failed.\nLet the app continue.\n",
                    "description": "<p>Handle Http operation that failed.\nLet the app continue.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1523,
                                "end": 1532,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "operation"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "pos": 1517,
                                "end": 1522,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>name of the operation that failed</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 1582,
                                "end": 1588,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "result"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1576,
                                "end": 1581,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>optional value to return as the observable result</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "joinSession",
                    "args": [
                        {
                            "name": "sessionType",
                            "type": "SessionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Session>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sessionType",
                            "type": "SessionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sessionCreate",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sessionType",
                            "type": "SessionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Session>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sessionType",
                            "type": "SessionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Session, SessionType, User } from '../model/session';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SessionService {\r\n  private sessionUrl = '/rest/session';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  sessionCreate(username: string, sessionType: SessionType): Observable<Session> {\r\n    const body = { name: username, type: sessionType };\r\n    return this.http.post<SessionResponse>(this.sessionUrl, body)\r\n    .pipe(\r\n      map( postResponse => {\r\n        // tslint:disable-next-line:max-line-length\r\n        return  {id: postResponse.id, type: sessionType, user: postResponse.user, users: [] } as Session;\r\n      }),\r\n       catchError(this.handleError<boolean>('sessionCreate', false)));\r\n  }\r\n  joinSession(sessionType: SessionType, sessionId: string, username: string): Observable<Session> {\r\n    return this.http.post<SessionResponse>(`${this.sessionUrl}/${sessionId}`, { name: username, sessionType })\r\n    .pipe(\r\n      map( postResponse => {\r\n        // tslint:disable-next-line:max-line-length\r\n        return  {id: postResponse.id, type: sessionType, user: postResponse.user, users: [] } as Session;\r\n      }),\r\n       catchError(this.handleError<boolean>('joinSession', false)));\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n     private handleError<T>(operation = 'operation', result?: T): any {\r\n      return (error: any): Observable<T> => {\r\n\r\n        // TODO: send the error to remote logging infrastructure\r\n        console.error(error);\r\n\r\n        // TODO: better job of transforming error for user consumption\r\n        console.log(`${operation} failed: ${error.message}`);\r\n\r\n        // Let the app keep running by returning an empty result.\r\n        return of(result as T);\r\n      };\r\n    }\r\n  }\r\ninterface SessionResponse {\r\n  id: string;\r\n  type: SessionType;\r\n  user: User;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatusService",
            "id": "injectable-StatusService-29fc1d3cbd3830cb682a23ef370beeb762eaf3a3a9aacba1caf57402b1b7dc75bd78c0a6a573bdb81fb79dfe49d87103e27b377466e3a27385173dfe4b26819f",
            "file": "src/app/service/status.service.ts",
            "properties": [
                {
                    "name": "$status",
                    "defaultValue": "new BehaviorSubject<string>('Status...')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "statusMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StatusService {\r\n\r\n  public $status: Subject<string> = new BehaviorSubject<string>('Status...');\r\n\r\n  constructor() { }\r\n\r\n  public statusMessage(message: string): void {\r\n    this.$status.next(message);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "WebsocketService",
            "id": "injectable-WebsocketService-53804faae040100ab2dfc267f2af24d66675981ecf573d7f727dca82c9b6d1592d2c01ff17f1ab1a1d722710c59de3af3e9a258f2664163759aaacaa49257afc",
            "file": "src/app/service/websocket.service.ts",
            "properties": [
                {
                    "name": "defaultActions",
                    "defaultValue": "['pong', 'ERROR', 'INIT']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "defaultMessageHandler",
                    "defaultValue": "this.defaultHandler.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handlers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HandlerSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "socket$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebSocketSubject<WsMessage>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "thereHasBeenContact",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "wsEndpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkToSentPing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "defaultHandler",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "handler",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "docHRef",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sessionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docHRef",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processErrorMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\r\nimport { WsMessage } from '../model/message';\r\nimport { StatusService } from './status.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebsocketService {\r\n\r\n  private socket$: WebSocketSubject<WsMessage>;\r\n  private wsEndpoint: string;\r\n  private handlers: HandlerSelection[] = [];\r\n  private thereHasBeenContact = false;\r\n\r\n  private defaultMessageHandler = this.defaultHandler.bind(this);\r\n  private defaultActions = ['pong', 'ERROR', 'INIT'];\r\n\r\n  constructor(private statusService: StatusService) {\r\n  }\r\n\r\n  public send(message: WsMessage): void {\r\n    if (!this.socket$ || this.socket$.closed) {\r\n      console.log('The connection has closed!!');\r\n    }\r\n    this.socket$.next(message);\r\n  }\r\n\r\n  public connect(): void {\r\n    if (!this.socket$ || this.socket$.closed) {\r\n      let handled = false;\r\n      this.socket$ = webSocket(this.wsEndpoint);\r\n      this.socket$.subscribe(\r\n        (data) => {\r\n          console.log(`Action received; ${data.action}`);\r\n          this.thereHasBeenContact = true;\r\n          this.handlers.forEach(h => {\r\n            if (h.sessionId && h.sessionId === data.sessionId) {\r\n              if (h.actions.includes(data.action)) {\r\n                handled = true;\r\n                h.handler(data);\r\n              }\r\n            }\r\n          });\r\n          if (! handled) {\r\n            if (this.defaultActions.includes(data.action)) {\r\n              this.defaultMessageHandler(data);\r\n            } else {\r\n              console.log(`Action ${data.action} could not be handled!!`);\r\n            }\r\n          }\r\n        },\r\n        (err) => console.error('Recieved error: %O', err),\r\n        () => console.log('Session completed'),\r\n      );\r\n      setInterval(this.checkToSentPing.bind(this), 60000);\r\n    } else {\r\n      console.log('Connection already existed');\r\n    }\r\n  }\r\n\r\n  public init(handler, sessionId: string, actions: string[], docHRef: string): void {\r\n    this.handlers.push({ actions, sessionId, handler} as HandlerSelection);\r\n    this.wsEndpoint = docHRef.replace('http', 'ws');\r\n    this.wsEndpoint = this.wsEndpoint.substring(0, this.wsEndpoint.indexOf('/', 10));\r\n    this.wsEndpoint = this.wsEndpoint + '/stream';\r\n    this.connect();\r\n  }\r\n\r\n  private defaultHandler(message: WsMessage): void {\r\n    switch (message.action) {\r\n      case 'pong' : console.log('Pong received'); break;\r\n      case 'ERROR': this.processErrorMessage(message); break;\r\n      case 'INIT': { this.statusService.$status.next(`Websocket connection established`); break; }\r\n      default: console.log(`Unknown message action (${message.action} received.)`);\r\n    }\r\n  }\r\n  private processErrorMessage(message: WsMessage): void {\r\n    console.log(`Error ${message.payload}`);\r\n  }\r\n  private checkToSentPing(): void {\r\n    if (this.thereHasBeenContact) {\r\n      this.thereHasBeenContact = false;\r\n    } else {\r\n      this.send({ action: 'ping', sessionId: '0', userId: -1 } as WsMessage);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface HandlerSelection {\r\n  actions: string[];\r\n  sessionId?: string;\r\n  handler: any;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-6d02e64d249a717edd15492a1a4ea004d5e5a3ec6530eef4848126a0f3fbe9007ea55177ab04c35684bed06809c3bb7fe2f5049400c4a573b8e47beef7224cbd",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.id('kop')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-34aac6e3f13b519e84a62b3f08a888347a350314dda6e7d1f3dc9b2df0d2be9493ee1833f55d7864a445b000a2be168aba286b85d2b5b78bfea286d76226b805",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeItem",
                    "defaultValue": "this.items[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "items",
                    "defaultValue": "[\r\n    {label: 'home', routerLink: 'home', icon: 'pi pi-fw pi-home'},\r\n    {label: 'retro', routerLink: 'retro', icon: 'pi pi-fw pi-bars'},\r\n    {label: 'plan', routerLink: 'plan', icon: 'pi pi-fw pi-chart-line'}\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'Scrum tooling'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onActivate",
                    "args": [
                        {
                            "name": "elementRef",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "elementRef",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MenuItem } from 'primeng/api';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Scrum tooling';\r\n\r\n  items: MenuItem[] = [\r\n    {label: 'home', routerLink: 'home', icon: 'pi pi-fw pi-home'},\r\n    {label: 'retro', routerLink: 'retro', icon: 'pi pi-fw pi-bars'},\r\n    {label: 'plan', routerLink: 'plan', icon: 'pi pi-fw pi-chart-line'}\r\n  ];\r\n  activeItem: MenuItem = this.items[0];\r\n\r\n  ngOnInit(): void {\r\n    this.activeItem = this.items[0];\r\n  }\r\n  onActivate(elementRef): void {\r\n    elementRef.tabSelectedEvent.subscribe(event => {\r\n        console.log(event);\r\n        this.activeItem = this.items[event - 1];\r\n    });\r\n}\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display:flex;\r\n  flex-direction:column;\r\n  align-items: stretch;\r\n}\r\np-toast {\r\n  flex:0;\r\n}\r\n.container {\r\n  flex-grow:1;\r\n  align-self: stretch;\r\n  display:flex;\r\n  flex-direction:column;\r\n  align-items: stretch;\r\n  padding: 10px;\r\n}\r\n.kop {\r\n  flex:0;\r\n  text-align: center;\r\n}\r\n.kop h1 {\r\n  margin-bottom: 5px;\r\n}\r\n.mainPanel {\r\n  flex-grow:1;\r\n  display:flex;\r\n  flex-direction:column;\r\n  align-items: stretch;\r\n  background-color: transparent;\r\n}\r\n.footer {\r\n  flex:0;\r\n  background-color: transparent;\r\n}\r\n\r\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav-content .p-tabmenu-nav .p-tabmenuitem.p-highlight {\r\n  background-color: #81f3f7;\r\n  border-bottom: 2px solid darkblue;\r\n  border-right: 2px solid darkblue;\r\n}\r\n\r\n:host ::ng-deep .p-tabmenu .p-tabmenu-nav-content .p-tabmenu-nav .p-tabmenuitem.p-highlight a {\r\n  background-color: transparent;\r\n}",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-toast position=\"top-right\"></p-toast>\r\n<div class=\"container\">\r\n  <div class=\"kop\">\r\n    <h1 id='kop'>Scrum tooling</h1>\r\n  </div>\r\n  <div class=\"mainPanel\">\r\n    <!-- <p-tabView>\r\n      <p-tabPanel class=\"my-tabpanel\" header=\"Home\" [selected]=\"true\"><app-home></app-home></p-tabPanel>\r\n      <p-tabPanel header=\"Retrospective\" class=\"retrospective-panel\"><app-retro-session></app-retro-session></p-tabPanel>\r\n      <p-tabPanel header=\"Poker\" class=\"refinement-panel\"><app-planning-session></app-planning-session></p-tabPanel>\r\n    </p-tabView> -->\r\n    <p-tabMenu [model]=\"items\"  [activeItem]=\"activeItem\"></p-tabMenu>\r\n    <router-outlet (activate)=\"onActivate($event)\"></router-outlet>\r\n  </div>\r\n  <div class=\"footer\">\r\n    <app-status></app-status>\r\n  </div>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardsViewComponent",
            "id": "component-CardsViewComponent-92232ab9129a1d88fd4b2c0afb698a7fae617954c9822fb75ed9860f8e0d8391df2b23ccebdc818524f85109dfad5dc559843b05f612fd5143dca6235d34170c",
            "file": "src/app/components/planning-session/cards-view/cards-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cards-view",
            "styleUrls": [
                "./cards-view.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./cards-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardNumbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cardSelectedEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cardClicked",
                    "args": [
                        {
                            "name": "card",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-cards-view',\r\n  templateUrl: './cards-view.component.html',\r\n  styleUrls: ['./cards-view.component.css']\r\n})\r\nexport class CardsViewComponent implements OnInit {\r\n\r\n  @Output() cardSelectedEvent = new EventEmitter<string>();\r\n  @Input() cardNumbers: string[];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.addCards();\r\n  }\r\n\r\n  public cardClicked(card: string): void {\r\n    this.cardSelectedEvent.emit(card);\r\n  }\r\n\r\n\r\n\r\n  addCards(): void {\r\n    let index = 2;\r\n    let selectedCard = null;\r\n    const card1 = document.getElementById('card1');\r\n    card1.addEventListener('click', (event) => {\r\n      if (selectedCard) {\r\n          selectedCard.getElementById('svgGroup').style.transform = 'translate(0, 0) scale(1)';\r\n          selectedCard.getElementById('cardRect').style.fill = 'white';\r\n      }\r\n      selectedCard = event.target;\r\n      selectedCard.getElementById('svgGroup').style.transform = 'translate(-10px, -14px) scale(1.15)';\r\n      selectedCard.getElementById('cardRect').style.fill = 'url(#grad1)';\r\n      this.cardClicked('0');\r\n  });\r\n\r\n    card1.addEventListener('click', () => {\r\n        console.log('0');\r\n    });\r\n    this.cardNumbers.forEach(cn => {\r\n        const card2 = card1.cloneNode(true);\r\n        card2.addEventListener('click', (event) => {\r\n            if (selectedCard) {\r\n                selectedCard.getElementById('svgGroup').style.transform = 'translate(0, 0) scale(1)';\r\n                selectedCard.getElementById('cardRect').style.fill = 'white';\r\n            }\r\n            selectedCard = event.target;\r\n            selectedCard.getElementById('svgGroup').style.transform = 'translate(-10px, -14px) scale(1.15)';\r\n            selectedCard.getElementById('cardRect').style.fill = 'url(#grad1)';\r\n            this.cardClicked(cn);\r\n        });\r\n        let svgElem = (card2 as Document).getElementById('svgGroup').firstChild;\r\n        while (svgElem) {\r\n            if ('text' === svgElem.nodeName) {\r\n                (svgElem.firstChild as Text).data = cn;\r\n            }\r\n            svgElem = svgElem.nextSibling;\r\n        }\r\n        document.getElementById('cards').appendChild(card2);\r\n        index++;\r\n    });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".animated {\r\n  transition: all 1s;\r\n}\r\n.defaultCard {\r\n  fill: white;\r\n  cursor: pointer;\r\n  stroke: black;\r\n}\r\n.selectedCard {\r\n  fill: lightblue;\r\n}\r\n.number {\r\n  fill: black;\r\n}\r\n.card {\r\n  fill: white;\r\n}\r\n",
                    "styleUrl": "./cards-view.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"cards\">\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"140\" height=\"200\" id=\"card1\" class=\"defaultCard\">\r\n      <defs>\r\n          <radialGradient id=\"grad1\">\r\n              <stop offset=\"0%\" stop-color=\"#99bbff\"/>\r\n              <stop offset=\"100%\" stop-color=\"#6699ff\"/>\r\n          </radialGradient>\r\n      </defs>\r\n\r\n      <g id=\"svgGroup\" class=\"animated\">\r\n          <rect id=\"cardRect\" class=\"card\" x=20 y=20 width=100 height=160 rx=10 style=\"stroke-width: 2\" pointer-events=\"none\"/>\r\n          <text class=\"number\" x=65 y=110 text-anchor='middle' font-family=\"sans-serif\" font-size=\"36\"  pointer-events=\"none\">0</text>\r\n          <text class=\"number\" x=25 y=40 text-anchor='start' font-family=\"sans-serif\" font-size=\"18\"  pointer-events=\"none\">0</text>\r\n          <text class=\"number\" x=110 y=40 text-anchor='end' font-family=\"sans-serif\" font-size=\"18\"  pointer-events=\"none\">0</text>\r\n          <text class=\"number\" x=25 y=170 text-anchor='start' font-family=\"sans-serif\" font-size=\"18\"  pointer-events=\"none\">0</text>\r\n          <text class=\"number\" x=110 y=170 text-anchor='end' font-family=\"sans-serif\" font-size=\"18\"  pointer-events=\"none\">0</text>\r\n      </g>\r\n  </svg>\r\n</div>\r\n<div id=\"options\" class=\"options\">\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-055408a2e14cef3d7066285a54ba324e699b27a116dad3f48a543b236000067db7b3c6d244005de3b093793eede361474ba65613be1f82d2ae87613b224f94c9",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "tabSelectedEvent",
                    "defaultValue": "new EventEmitter<TabSelected>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { TabSelected } from '../../shared/tab-selected';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  @Output() tabSelectedEvent = new EventEmitter<TabSelected>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.tabSelectedEvent.emit(TabSelected.Home);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>multiple tools are available to be used during scrum meetings.</p>\r\n<ul>\r\n  <li>planning poker</li>\r\n  <li>retrospective</li>\r\n</ul>"
        },
        {
            "name": "MessagesViewComponent",
            "id": "component-MessagesViewComponent-65656189c146de844504db297410115800d39e9111c53bc7604096a20f4a7dbc8a7eae4330ba1400ef10831d167a6be635dc315a60717d19d3226f97dadabdc2",
            "file": "src/app/components/messages-view/messages-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-messages-view",
            "styleUrls": [
                "./messages-view.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./messages-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "messageReceived",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Observable<string>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "messageEntered",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "interval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-messages-view',\r\n  templateUrl: './messages-view.component.html',\r\n  styleUrls: ['./messages-view.component.css']\r\n})\r\nexport class MessagesViewComponent implements OnInit {\r\n\r\n  @Input() messageReceived: Observable<string >;\r\n  @Output() messageEntered = new EventEmitter<string>();\r\n\r\n  public message = '';\r\n  public messages: Message[] = [];\r\n  private interval: any;\r\n\r\n\r\n  constructor(){ }\r\n\r\n  ngOnInit(): void {\r\n    this.messageReceived.subscribe(\r\n      data => this.messages = [ { message: data, timeEntered: Date.now()}, ...this.messages ]\r\n    );\r\n    this.interval = setInterval(() => this.messages = this.messages.filter(m => (Date.now() - m.timeEntered) < 90000 ), 60000);\r\n  }\r\n\r\n  public addMessage(): void {\r\n    this.messageEntered.emit(this.message);\r\n  }\r\n\r\n}\r\ninterface Message {\r\n  message: string;\r\n  timeEntered: number;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./messages-view.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"min-width: 200px; height: 100%; display:flex; flex-direction:column\">\r\n  <div style=\"flex-grow: 1;\">\r\n    <span>Messages:</span>\r\n    <hr>\r\n    <div>\r\n      <span *ngFor=\"let message of messages\">\r\n        <span>{{message.message}}<br></span>\r\n      </span>\r\n    </div>\r\n  </div>\r\n  <div style=\"flex-grow: 0;\">\r\n    <input type=\"text\" [(ngModel)]=\"message\">\r\n    <button type=\"submit\" (click)=addMessage() >Send</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PlanningSessionComponent",
            "id": "component-PlanningSessionComponent-02349585a7fa169c720e1f2ac9f2dcc33bd621b203d8cd525cb3738c9859fdbbab9312b595a36cb0d306053992b93e34e4b345d2fd0fc4aeefbb98a58a80fdb2",
            "file": "src/app/components/planning-session/planning-session.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-planning-session",
            "styleUrls": [
                "./planning-session.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./planning-session.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "tabSelectedEvent",
                    "defaultValue": "new EventEmitter<TabSelected>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "['UpdatePlanSession', 'NewMessage', 'UpdateVotes', 'UpdatePhase']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cardNumbers",
                    "defaultValue": "environment.CARD_SYMBOLS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "chartColors",
                    "defaultValue": "environment.CHART_COLORS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inSession",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messages",
                    "defaultValue": "'Default message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "newMessage",
                    "defaultValue": "new BehaviorSubject<string>('Status...')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "phase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "processMessage",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "session",
                    "defaultValue": "{id: null, type: SessionType.UNKNOWN, user: {id: null, name: null, role: null, vote: null}, phase: null,  users: []}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Session",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sessiontype",
                    "defaultValue": "'new'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "switchPhase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMessage",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNewMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cardSelected",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinkUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUsersFromMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "User[]",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "joinSession",
                    "args": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSession",
                    "args": [
                        {
                            "name": "$event",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processUpdateSession",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showThatTheUserHasVoted",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchPhaseHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "switchToPhase",
                    "args": [
                        {
                            "name": "phase",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "phase",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePhase",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateVotes",
                    "args": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "WsMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { Clipboard } from '@angular/cdk/clipboard';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport {MessageService} from 'primeng/api';\r\nimport { WsMessage } from 'src/app/model/message';\r\n\r\nimport {SessionService} from '../../service/session.service';\r\nimport {WebsocketService} from '../../service/websocket.service';\r\n\r\nimport { environment } from '../../../environments/environment';\r\nimport { User, UserVotes, SessionType, Session, Role } from '../../model/session';\r\n\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { TabSelected } from '../../shared/tab-selected';\r\n\r\nimport { ScrumCookieService } from '../../service/scrum-cookie.service';\r\nimport { SessionConnectType, SessionInfo } from 'src/app/model/session-info';\r\n\r\n@Component({\r\n    selector: 'app-planning-session',\r\n    templateUrl: './planning-session.component.html',\r\n    styleUrls: ['./planning-session.component.css'],\r\n    providers: []\r\n})\r\nexport class PlanningSessionComponent implements OnInit {\r\n\r\n  @Output() tabSelectedEvent = new EventEmitter<TabSelected>();\r\n\r\n  public newMessage: Subject<string> = new BehaviorSubject<string>('Status...');\r\n\r\n  public session: Session =\r\n    {id: null, type: SessionType.UNKNOWN, user: {id: null, name: null, role: null, vote: null}, phase: null,  users: []};\r\n  public inSession = false;\r\n  public sessiontype = 'new';\r\n\r\n  public messages  = 'Default message';\r\n  public status = '';\r\n\r\n  public switchPhase: string;\r\n  public phase: string;\r\n\r\n  private baseUrl: string;\r\n\r\n  public cardNumbers = environment.CARD_SYMBOLS;\r\n  public chartColors = environment.CHART_COLORS;\r\n\r\n  private actions: string[] = ['UpdatePlanSession', 'NewMessage', 'UpdateVotes', 'UpdatePhase'];\r\n\r\n  constructor(\r\n    private sessionService: SessionService,\r\n    private websocketService: WebsocketService,\r\n    private route: ActivatedRoute,\r\n    private clipboard: Clipboard,\r\n    private cookieService: ScrumCookieService,\r\n    private messageService: MessageService)\r\n  {\r\n    this.baseUrl = document.location.href;\r\n    if (this.baseUrl.indexOf('?') >= 0) {\r\n      this.baseUrl = this.baseUrl.substring(0, this.baseUrl.indexOf('?'));\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.session.user.name = this.cookieService.getUsername();\r\n    this.tabSelectedEvent.emit(TabSelected.PlanningPoker);\r\n    this.route.queryParams.subscribe(params => {\r\n      this.session.id = params.sessionId;\r\n      if (params.userId) {\r\n        this.session.user.name = params.userId;\r\n      }\r\n      if (this.session.id) {\r\n        this.sessiontype='existing';\r\n        if (this.session.user.name) {\r\n          this.joinSession({username: this.session.user.name, sessionId: this.session.id} as SessionInfo);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public joinSession(sessionInfo: SessionInfo): void {\r\n    this.cookieService.usingUsername(sessionInfo.username);\r\n    this.sessionService.joinSession(SessionType.REFINEMENT, sessionInfo.sessionId, sessionInfo.username).subscribe(session => {\r\n      if (session) {\r\n        this.status = '';\r\n        this.messages = 'In session\\n';\r\n        this.inSession = true;\r\n        this.session = JSON.parse(JSON.stringify(session));\r\n        this.websocketService.init(this.processMessage, this.session.id, this.actions, document.location.href);\r\n        this.websocketService.send({ action: 'JoinSession', sessionId: this.session.id, userId: this.session.user.id, payload: `Joining session ${this.session.id}`});\r\n      } else {\r\n        this.inSession = false;\r\n        console.log('Unable to join that session!!');\r\n        this.status = 'Unable to join that session!';\r\n      }\r\n    },\r\n    err => {\r\n      console.log(err);\r\n      this.status = 'Unable to join that session!';\r\n    });\r\n  }\r\n  public createSession(sessionInfo: SessionInfo): void {\r\n    this.cookieService.usingUsername(sessionInfo.username);\r\n    this.sessionService.sessionCreate(sessionInfo.username, SessionType.REFINEMENT).subscribe(\r\n      session => {\r\n        this.status = '';\r\n        this.inSession = true;\r\n        this.session = JSON.parse(JSON.stringify(session));\r\n        const handler = (this.processMessage).bind(this);\r\n        this.websocketService.init(handler, this.session.id, this.actions, document.location.href);\r\n        this.websocketService.send({ action: 'JoinSession', sessionId: this.session.id, userId: this.session.user.id, payload: `Joining session ${this.session.id}`});\r\n      },\r\n      err => {\r\n        console.log(err);\r\n        this.status = 'Unable to create a session!';\r\n      }\r\n    );\r\n  }\r\n\r\n  public openSession($event: SessionInfo): void {\r\n    switch ($event.state) {\r\n      case SessionConnectType.NEW : this.createSession($event); break;\r\n      case SessionConnectType.EXISTING : this.joinSession($event); break;\r\n    }\r\n  }\r\n\r\n  public switchPhaseHandler(): void {\r\n    if (this.phase === 'voting') {\r\n      this.switchToPhase('showResults');\r\n      this.websocketService.send({ action: 'SwitchPhase', sessionId: this.session.id, userId: this.session.user.id, payload: this.phase});\r\n    } else if (this.phase === 'showResults') {\r\n      this.switchToPhase('voting');\r\n      this.websocketService.send({ action: 'SwitchPhase', sessionId: this.session.id, userId: this.session.user.id, payload: this.phase});\r\n    } else {\r\n      console.log(`Unknown phase ${this.phase}`);\r\n    }\r\n  }\r\n\r\n  private switchToPhase(phase: string): void {\r\n    if (phase === 'voting') {\r\n      this.phase = 'voting';\r\n      this.switchPhase = 'Finish voting';\r\n    } else if (phase === 'showResults') {\r\n      this.phase = 'showResults';\r\n      this.switchPhase = 'Start voting';\r\n    } else {\r\n      console.log(`Unknown phase ${phase}`);\r\n    }\r\n  }\r\n\r\n  public addMessage($event): void {\r\n    const wsMessage = { action: 'AddMessage', sessionId: this.session.id, userId: this.session.user.id, payload: $event } as WsMessage;\r\n    console.log(`PlanningSessionManager.addMessage: ${JSON.stringify(wsMessage)}`);\r\n    this.websocketService.send(wsMessage);\r\n  }\r\n\r\n  public cardSelected($event): void {\r\n    this.websocketService.send({ action: 'EnterVote',\r\n      sessionId: this.session.id, userId: this.session.user.id, payload: $event });\r\n  }\r\n  public showThatTheUserHasVoted(user: User): boolean {\r\n    return user.vote && this.phase === 'voting';\r\n  }\r\n\r\n  processMessage = (message: WsMessage) => {\r\n    switch (message.action) {\r\n      case 'UpdatePlanSession' : this.processUpdateSession(message); break;\r\n      case 'NewMessage' : this.addNewMessage(message); break;\r\n      case 'UpdateVotes' : this.updateVotes(message); break;\r\n      case 'UpdatePhase' : this.updatePhase(message); break;\r\n      default: console.log(`PlanningSessionComponent.processMessage: Unknown message action (${message.action}) received.`);\r\n    }\r\n  }\r\n  private processUpdateSession(message: WsMessage): void {\r\n    this.session.users = this.getUsersFromMessage(message);\r\n    if (! this.session.user.role) {\r\n      this.session.user.role = this.session.users.find(u => u.id === this.session.user.id).role;\r\n    }\r\n  }\r\n  private getUsersFromMessage(message: WsMessage): User[] {\r\n    return  (message.payload as User[]).sort((u1, u2) => {\r\n      if (u1.name > u2.name) { return 1; }\r\n      if (u1.name < u2.name) { return -1; }\r\n      return 0;\r\n    });\r\n  }\r\n  private addNewMessage(message: WsMessage): void {\r\n    this.newMessage.next(message.payload);\r\n  }\r\n  private updateVotes(message: WsMessage): void {\r\n    this.session.users.forEach( u => {\r\n      const tempVote = (message.payload as UserVotes[]).find(uv => u.id === uv.userid);\r\n      if ( tempVote) {\r\n        u.vote = tempVote.vote;\r\n      } else {\r\n        u.vote = undefined;\r\n      }\r\n    });\r\n  }\r\n  private updatePhase(message: WsMessage): void {\r\n    this.switchToPhase(message.payload);\r\n  }\r\n\r\n  getLinkUrl(): void {\r\n    const result = `${this.baseUrl}?sessionId=${this.session.id}`;\r\n    this.clipboard.copy(result);\r\n    this.messageService.add({severity: 'success', summary: 'Success', detail: 'Url copied to clipboard'});\r\n  }\r\n  public isAdmin(): boolean {\r\n    return this.session.user.role === Role.ScrumMaster;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".controle-panel a {\r\n  color: darkblue;\r\n  font-weight: bold;\r\n}\r\n.controle-panel {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: stretch;\r\n  border: 10px white solid;\r\n  min-width: 300px;\r\n  max-width: 300px;\r\n}\r\n.three-panel-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: stretch;\r\n}\r\n.user-panel {\r\n  min-width: 200px;\r\n  max-width: 200px;\r\n}\r\n:host {\r\n  background-color: transparent;\r\n}\r\n",
                    "styleUrl": "./planning-session.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "ScrumCookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "ScrumCookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-session-init *ngIf=\"!inSession\" (onStartSession)=\"openSession($event)\" [sessionId]=\"session.id\"></app-session-init>\r\n\r\n<!-- <div *ngIf=\"!inSession\" class=\"login-panel\">\r\n    <label for=\"username\">User Id:</label>\r\n    <input id=\"planning_username\" name=\"username\" type=\"text\" [(ngModel)]=\"session.user.name\"> <br>\r\n    <div class=\"select-session\">\r\n        <ul>\r\n            <li>\r\n                <p-radioButton name=\"sessieType\" value=\"new\" [(ngModel)]=\"sessiontype\" inputId=\"sessionNew\"></p-radioButton>\r\n                <label for=\"sessionNew\">Create new Session</label>\r\n            </li>\r\n            <li>\r\n                <p-radioButton name=\"sessieType\" value=\"existing\" [(ngModel)]=\"sessiontype\" inputId=\"sessionExisting\"></p-radioButton>\r\n                <label for=\"sessionExisting\">Join existing session with id: </label>\r\n                <input id=\"planning_session_id\" name=\"sessionId\" type=\"text\" [(ngModel)]=\"session.id\" [disabled]=\"sessiontype!=='existing'\"><br/>\r\n            </li>\r\n        </ul>\r\n        <button id=\"Start\" (click)=\"openSession()\">Start</button>\r\n    </div>\r\n</div> -->\r\n<div *ngIf=\"inSession\">\r\n    <div class=\"three-panel-container\">\r\n        <div id=\"userPanel\" class=\"user-panel\">Users: <br>\r\n            <ul>\r\n                <li *ngFor=\"let user of session.users\">\r\n                    <span>{{user.name}}\r\n                        <i [ngClass]=\"{'pi pi-check' :  user.vote && phase === 'voting' }\"></i>\r\n                        <i *ngIf=\"user.vote && phase === 'showResults'\">( {{user.vote}} )</i>\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div id=\"planningMainpanel\" class=\"main-panel\">\r\n            <div *ngIf=\"phase==='voting'\">\r\n                <div class=\"card-panel\">\r\n                    <app-cards-view [cardNumbers]=\"cardNumbers\" (cardSelectedEvent)=\"cardSelected($event)\"></app-cards-view>\r\n                </div>\r\n            </div>\r\n            <div class=\"result-panel\" *ngIf=\"phase==='showResults'\">\r\n                <app-result-view [users]=\"session.users\" [choices]=\"cardNumbers\" [colors]=\"chartColors\"></app-result-view>\r\n            </div>\r\n        </div>\r\n        <div id=\"controlePanel\" class=\"controle-panel\">\r\n            <div class=\"controlePanel\">\r\n                <div>\r\n                    <label>Session: <a (click)=\"getLinkUrl()\" title=\"click to copy the session-url\">{{session.id}}</a></label><br />\r\n                    <label>User: {{session.user.name}} ({{session.user.id}})</label><br />\r\n                </div>\r\n                <button *ngIf=\"isAdmin()\" pButton type=\"button\" label=\"{{switchPhase}}\" (click)=\"switchPhaseHandler()\"></button>\r\n                <div id=\"messagePanel\"  style=\"flex-grow: 1; border: 1px solid black; padding:4px;margin-bottom: 20px;\">\r\n                    <app-messages-view [messageReceived]=\"newMessage\" (messageEntered)=\"addMessage($event)\"></app-messages-view>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n</div>\r\n<p-scrollPanel class=\"footer\">\r\n    <p>{{status}}</p>\r\n</p-scrollPanel>\r\n"
        },
        {
            "name": "ResultViewComponent",
            "id": "component-ResultViewComponent-ce0af648a811922df45594f93a54d0a916f872a616f6925e1c2de32672534900e499b1820a7a5a897ab6f2b9960693e355e5bdced533244513683a7fb0a6439a",
            "file": "src/app/components/planning-session/result-view/result-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-result-view",
            "styleUrls": [
                "./result-view.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./result-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "choices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "User[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "{\r\n    labels: [],\r\n    datasets: [\r\n        {\r\n            data: [],\r\n            backgroundColor: [],\r\n            hoverBackgroundColor: []\r\n        }]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { User } from 'src/app/model/session';\r\n\r\n@Component({\r\n  selector: 'app-result-view',\r\n  templateUrl: './result-view.component.html',\r\n  styleUrls: ['./result-view.component.css']\r\n})\r\nexport class ResultViewComponent implements OnInit {\r\n\r\n  @Input() users: User[];\r\n  @Input() choices: string[];\r\n  @Input() colors: string[];\r\n\r\n  public data: any = {\r\n    labels: [],\r\n    datasets: [\r\n        {\r\n            data: [],\r\n            backgroundColor: [],\r\n            hoverBackgroundColor: []\r\n        }]\r\n    };\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    const cnt: Counts[] = [];\r\n    this.users.forEach(u => {\r\n      let temp = cnt.find(c => c.value === u.vote);\r\n      if (! temp) {\r\n        temp = { value: u.vote, label: u.vote + ' SP', count: 0 };\r\n        cnt.push(temp);\r\n      }\r\n      temp.count++;\r\n    });\r\n\r\n    const labels = cnt.map(c => c.label + ` (${c.count}x)`);\r\n    const data = cnt.map(c => c.count);\r\n    this.data.labels = labels;\r\n    this.data.datasets[0].label = 'cnt';\r\n    this.data.datasets[0].data = data;\r\n    this.data.datasets[0].backgroundColor = this.colors;\r\n    this.data.datasets[0].hoverBackgroundColor = this.colors;\r\n  }\r\n\r\n}\r\n\r\ninterface Counts {\r\n  value: string;\r\n  label: string;\r\n  count: number;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./result-view.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>Resultaat</h2>\r\n<p-chart type=\"pie\" [data]=\"data\"></p-chart>\r\n<!-- p-chart type=\"doughnut\" [data]=\"data\"></p-chart -->"
        },
        {
            "name": "RetroColumnComponent",
            "id": "component-RetroColumnComponent-52f58a0bbe76956a93faecd8e839d7f28fd8b680aaa8c0860d59ce994aaeba55695954ddd660d1366bbd41c795bd09eee212b3b5b0db7545ff73b49a8691c087",
            "file": "src/app/components/retro-session/retro-column/retro-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-retro-column",
            "styleUrls": [
                "./retro-column.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./retro-column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "availableVotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": [
                        {
                            "name": "Output",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "columnData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "RetrospectiveColumnData",
                    "decorators": []
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteNoteEvent",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "editNoteEvent",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "mergeNotesEvent",
                    "defaultValue": "new EventEmitter<NotesToMerge>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "newNoteEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "updateNoteEvent",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "votedEvent",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteRetroNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editRetroNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mergeNotes",
                    "args": [
                        {
                            "name": "notes2Merge",
                            "type": "NotesToMerge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "notes2Merge",
                            "type": "NotesToMerge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateRetroNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "voted",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { RetrospectiveColumnData, RetrospectiveNote } from '../../../model/retrospective-data';\r\nimport { SessionService } from '../../../service/session.service';\r\nimport { NotesToMerge } from '../../../model/notes-to-merge';\r\n\r\n@Component({\r\n  selector: 'app-retro-column',\r\n  templateUrl: './retro-column.component.html',\r\n  styleUrls: ['./retro-column.component.css']\r\n})\r\nexport class RetroColumnComponent implements OnInit {\r\n\r\n  @Input() userId: number;\r\n  @Input() columnData: RetrospectiveColumnData;\r\n  @Input() @Output() availableVotes: number;\r\n  @Output() newNoteEvent = new EventEmitter<number>();\r\n  @Output() updateNoteEvent = new EventEmitter<RetrospectiveNote>();\r\n  @Output() editNoteEvent = new EventEmitter<RetrospectiveNote>();\r\n  @Output() deleteNoteEvent = new EventEmitter<RetrospectiveNote>();\r\n  @Output() votedEvent = new EventEmitter<RetrospectiveNote>();\r\n  @Output() mergeNotesEvent = new EventEmitter<NotesToMerge>();\r\n\r\n  constructor(private sessionService: SessionService) { }\r\n  ngOnInit(): void {\r\n    // this.columnData.notes = this.columnData.notes;\r\n  }\r\n  addMessage(): void {\r\n    this.newNoteEvent.emit();\r\n  }\r\n  updateRetroNote(note: RetrospectiveNote): void {\r\n    this.updateNoteEvent.emit(note);\r\n  }\r\n  public editRetroNote(note: RetrospectiveNote): void {\r\n    this.editNoteEvent.emit(note);\r\n  }\r\n  public deleteRetroNote(note: RetrospectiveNote): void {\r\n    this.deleteNoteEvent.emit(note);\r\n  }\r\n  public voted($event): void {\r\n    this.votedEvent.emit($event);\r\n  }\r\n  public mergeNotes(notes2Merge: NotesToMerge): void {\r\n    this.mergeNotesEvent.emit(notes2Merge);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#messages {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n",
                    "styleUrl": "./retro-column.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div >\r\n  <div>\r\n    <span>{{columnData.title}}</span><span class=\"pi pi-plus-circle\" style=\"float: right;\" (click)=\"addMessage()\"></span>\r\n  </div>\r\n  <app-retro-message *ngFor=\"let message of columnData.notes\" [message]=\"message\" [userId]=\"userId\"  [availableVotes]=\"availableVotes\" (availableVotes)=\"availableVotes\" \r\n    (votedEvent)=\"voted($event)\" (updateNote)=\"updateRetroNote($event)\"  (editNote)=\"editRetroNote($event)\" (deleteNote)=\"deleteRetroNote($event)\" \r\n    (mergeNotesEvent)=\"mergeNotes($event)\" ></app-retro-message>\r\n</div>"
        },
        {
            "name": "RetroMessageComponent",
            "id": "component-RetroMessageComponent-579ccb92c761e8686994845659106121ffac041d253805f4d693c6b7bf16778f87bf1ce7a1352125e42786136bf84425f68eeb394ade18c1a22216ff9a018bd6",
            "file": "src/app/components/retro-session/retro-message/retro-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-retro-message",
            "styleUrls": [
                "./retro-message.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./retro-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "availableVotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "RetrospectiveNote",
                    "decorators": []
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteNote",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "editNote",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "mergeNotesEvent",
                    "defaultValue": "new EventEmitter<NotesToMerge>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "updateNote",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "votedEvent",
                    "defaultValue": "new EventEmitter<RetrospectiveNote>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "retroService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RetroSessionService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tempMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "textElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'noteTextarea'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "allowDrop",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getMessageTxt",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getMessageTxtOrPlaceholder",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messageIsBeingEdittedButNotByMe",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messageIsBeingEdittedByMe",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messageIsNotBeingEditted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processText",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stillHaveVotes",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "voteMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef, AfterViewInit, ɵ_sanitizeHtml } from '@angular/core';\r\nimport { RetrospectiveNote } from '../../../model/retrospective-data';\r\nimport { NotesToMerge } from '../../../model/notes-to-merge';\r\nimport * as sanitizeHtml from 'sanitize-html';\r\nimport { RetroSessionService } from 'src/app/service/retro-session.service';\r\n\r\n@Component({\r\n  selector: 'app-retro-message',\r\n  templateUrl: './retro-message.component.html',\r\n  styleUrls: ['./retro-message.component.css']\r\n})\r\nexport class RetroMessageComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('noteTextarea') textElement: ElementRef;\r\n\r\n  public tempMessage: string;\r\n\r\n  @Input() message: RetrospectiveNote;\r\n  @Input() userId: number;\r\n  @Input() availableVotes: number;\r\n  @Output() updateNote = new EventEmitter<RetrospectiveNote>();\r\n  @Output() editNote = new EventEmitter<RetrospectiveNote>();\r\n  @Output() deleteNote = new EventEmitter<RetrospectiveNote>();\r\n  @Output() votedEvent = new EventEmitter<RetrospectiveNote>();\r\n  @Output() mergeNotesEvent = new EventEmitter<NotesToMerge>();\r\n\r\n  constructor(public retroService: RetroSessionService) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  ngAfterViewInit(): void {\r\n    if (this.textElement && this.messageIsBeingEdittedByMe) {\r\n       this.textElement.nativeElement.focus();\r\n    }\r\n  }\r\n  processText(event): void {\r\n    if (event.key === 'Enter') {\r\n      this.message.userId = null;\r\n      this.message.txt = event.target.value;\r\n      this.updateNote.emit(this.message);\r\n    }\r\n  }\r\n  public messageIsNotBeingEditted(): boolean {\r\n    return ( !this.message.userId );\r\n  }\r\n  public messageIsBeingEdittedButNotByMe(): boolean {\r\n    return (this.message.userId && this.message.userId !== this.userId);\r\n  }\r\n  public messageIsBeingEdittedByMe(): boolean {\r\n    return this.message.userId && this.userId === this.message.userId;\r\n  }\r\n  public editMessage(): void {\r\n    this.editNote.emit(this.message);\r\n  }\r\n  public deleteMessage(): void {\r\n    this.deleteNote.emit(this.message);\r\n  }\r\n  public voteMessage(): void {\r\n    if (this.availableVotes < 1) { return; }\r\n    if (this.message.votes) {\r\n      this.message.votes++;\r\n    } else {\r\n      this.message.votes = 1;\r\n    }\r\n    this.votedEvent.emit(this.message);\r\n  }\r\n  public stillHaveVotes(): boolean {\r\n    return this.availableVotes < 1;\r\n  }\r\n\r\n  public dragStart($event: any): boolean {\r\n    if (this.messageIsNotBeingEditted()) {\r\n      this.retroService.setDraggedMessage(this.message);\r\n    }\r\n    return this.messageIsNotBeingEditted();\r\n  }\r\n  public allowDrop($event: any): void {\r\n    console.log('allowDrop: ' + JSON.stringify($event));\r\n    if (this.messageIsNotBeingEditted() && this.message.id !== this.retroService.getDraggedMessageId()) {\r\n      $event.preventDefault();\r\n    }\r\n  }\r\n  public onDrop($event: any): void {\r\n    $event.preventDefault();\r\n    const note2MergeId = this.retroService.getDraggedMessageId();\r\n    this.retroService.resetDraggedMessage();\r\n    this.mergeNotesEvent.emit({baseNoteId: this.message.id, note2MergeId } as NotesToMerge);\r\n  }\r\n\r\n  public getMessageTxt(): string {\r\n    let txt = sanitizeHtml(this.message.txt);\r\n    while (txt.indexOf('\\n') > 0) {\r\n      txt = txt.replace('\\n', '<BR>');\r\n    }\r\n    return txt\r\n    ;\r\n  }\r\n  public getMessageTxtOrPlaceholder(): string {\r\n    return this.message.txt ? this.message.txt : 'Being edited...';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".message-panel {\r\n  background-color: blue;\r\n  margin: 5px 5px 5px 5px;\r\n  padding: 5px 5px 5px 10px;\r\n  border-left: 1px solid black;\r\n  border-top: 1px solid black;\r\n  border-right: 1px solid black;\r\n  border-top-left-radius: 10px;\r\n  border-bottom-right-radius: 10px;\r\n}\r\n\r\n.blur-text {\r\n  filter: blur(4px)\r\n}\r\n\r\n.noteText::placeholder {\r\n  color: white;\r\n  font-weight: bold;\r\n}\r\n\r\n.messageHeader {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  float: right;\r\n  display: inline;\r\n  width: 100%;\r\n  border-bottom: 1px solid gray;\r\n  padding-bottom: 5px;\r\n  position: relative;\r\n}\r\n.messageHeader button {\r\n  color: white;\r\n  background-color: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  float: right;\r\n  margin-top: 2px;\r\n  margin-bottom: 2px;\r\n}\r\n.votes {\r\n  margin: 0px  !important;\r\n  font-size: smaller;\r\n}\r\n.messageHeader button:disabled {\r\n  color: gray;\r\n  cursor: default;\r\n}\r\n.message-block textarea {\r\n  color: white;\r\n  border: none;\r\n  width: 98%;\r\n  background-color: transparent;\r\n  padding: 0 0 0 0;\r\n}\r\n.message-block span {\r\n  margin: 15px 5px 15px 0px;\r\n  color: white;\r\n}\r\n\r\n.message-block textarea:focus {\r\n  outline: none;\r\n}\r\n.messageFooter {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  width: 100%;\r\n  min-height: 20px;\r\n  padding-bottom: 5px;\r\n}\r\n.messageFooter button {\r\n  color: white;\r\n  background-color: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  float: right;\r\n  margin-right: 10px;\r\n}\r\n.messageFooter button:disabled {\r\n  color: gray;\r\n  cursor: default;\r\n}\r\n",
                    "styleUrl": "./retro-message.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "retroService",
                        "type": "RetroSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "retroService",
                        "type": "RetroSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"message-panel\" draggable=\"true\"  (dragover)=\"allowDrop($event)\" (dragstart)=\"dragStart($event)\" (drop)=\"onDrop($event)\">\r\n  <div class=\"message-block\">\r\n    <div class=\"messageHeader\">\r\n      <span class=\"votes\" *ngIf=\"message.votes\">{{message.votes}}</span>\r\n      <button class=\"pi pi-pencil\" [disabled]=\"message.userId\" (click)=\"editMessage()\"> </button>\r\n      <button class=\"pi pi-times-circle\" [disabled]=\"message.userId\"  (click)=\"deleteMessage()\"> </button>\r\n    </div>\r\n    <div *ngIf=\"messageIsBeingEdittedByMe()\"><textarea #noteTextarea class=\"noteText\" placeholder=\"Enter your remark\" [(ngModel)]=\"message.txt\" (keydown)=\"processText($event)\"></textarea></div>\r\n    <span *ngIf=\"messageIsBeingEdittedButNotByMe()\" class=\"blur-text\">{{getMessageTxtOrPlaceholder()}}</span>\r\n    <span *ngIf=\"messageIsNotBeingEditted()\" [innerHTML]=\"getMessageTxt()\"></span>\r\n    <div class=\"messageFooter\" *ngIf=\"messageIsNotBeingEditted()\">\r\n      <button class=\"pi pi-thumbs-up\" (click)=\"voteMessage()\" [disabled]=\"stillHaveVotes()\"> </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RetroSessionComponent",
            "id": "component-RetroSessionComponent-a6327300937c56479b88f9993f750920490e292eca68f9f2d990dde08cb727166b5dcf45cb85b2678dc150944c48500041f1a01d3c2facc63d7524f736477433",
            "file": "src/app/components/retro-session/retro-session.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-retro-session",
            "styleUrls": [
                "./retro-session.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./retro-session.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "tabSelectedEvent",
                    "defaultValue": "new EventEmitter<TabSelected>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "display",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icons",
                    "defaultValue": "[faSmile, faMeh, faFrown]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[\r\n    {label: 'export', command: () => { this.saveNotes(); }},\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messages",
                    "defaultValue": "'Default message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "newMessage",
                    "defaultValue": "this.retroService.newMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "retroService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RetroSessionService",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMessage",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNote",
                    "args": [
                        {
                            "name": "colId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSession",
                    "args": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinkUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "joinSession",
                    "args": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionInfo",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mergeNotes",
                    "args": [
                        {
                            "name": "notes2Merge",
                            "type": "NotesToMerge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "notes2Merge",
                            "type": "NotesToMerge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moodboardStatusUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "myMoodSelection",
                    "args": [
                        {
                            "name": "selection",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSession",
                    "args": [
                        {
                            "name": "$event",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "SessionInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendDeleteNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendEditNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendUpdatedNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "RetrospectiveNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "voted",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { Clipboard } from '@angular/cdk/clipboard';\r\nimport {MessageService} from 'primeng/api';\r\nimport { saveAs } from '../../../../node_modules/file-saver';\r\nimport { faSmile, faFrown, faMeh } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { NotesToMerge } from 'src/app/model/notes-to-merge';\r\nimport { RetroSessionService } from 'src/app/service/retro-session.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TabSelected } from '../../shared/tab-selected';\r\nimport { ScrumCookieService } from '../../service/scrum-cookie.service';\r\nimport { RetrospectiveNote } from '../../model/retrospective-data';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { SessionConnectType, SessionInfo } from 'src/app/model/session-info';\r\n\r\n@Component({\r\n  selector: 'app-retro-session',\r\n  templateUrl: './retro-session.component.html',\r\n  styleUrls: ['./retro-session.component.css']\r\n})\r\nexport class RetroSessionComponent implements OnInit {\r\n\r\n  @Output() tabSelectedEvent = new EventEmitter<TabSelected>();\r\n  public newMessage: Observable<string> = this.retroService.newMessage;\r\n\r\n  public menuItems: MenuItem[] = [\r\n    {label: 'export', command: () => { this.saveNotes(); }},\r\n  ];\r\n\r\n  public icons = [faSmile, faMeh, faFrown];\r\n\r\n  public messages = 'Default message';\r\n  public message = '';\r\n  public status = '';\r\n\r\n  public display = false;\r\n\r\n  private baseUrl: string;\r\n\r\n  constructor(public retroService: RetroSessionService,\r\n              private route: ActivatedRoute,\r\n              private clipboard: Clipboard,\r\n              private cookieService: ScrumCookieService,\r\n              private messageService: MessageService) {\r\n\r\n    this.retroService.session.user.name = this.cookieService.getUsername();\r\n    this.baseUrl = document.location.href;\r\n    if (this.baseUrl.indexOf('?') >= 0) {\r\n      this.baseUrl = this.baseUrl.substring(0, this.baseUrl.indexOf('?'));\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (! this.retroService.inSession) {\r\n      this.tabSelectedEvent.emit(TabSelected.Retrospective);\r\n      this.route.queryParams.subscribe(params => {\r\n        this.retroService.session.id = params.sessionId;\r\n        if (params.userId) {\r\n          this.retroService.session.user.name = params.userId;\r\n        }\r\n        if (this.retroService.session.id) {\r\n          if (this.retroService.session.user.name) {\r\n            this.joinSession({username: this.retroService.session.user.name, sessionId: this.retroService.session.id} as SessionInfo);\r\n          } else {\r\n            \r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public joinSession(sessionInfo: SessionInfo): void {\r\n    this.cookieService.usingUsername(sessionInfo.username);\r\n    this.retroService.joinSession(sessionInfo).subscribe(r => {\r\n      if (!this.retroService.inSession) {\r\n        console.log('Unable to join that session!!');\r\n        this.status = 'Unable to join that session';\r\n      } else {\r\n        if (this.retroService.isAdmin()) {\r\n         this.menuItems.push ({label: 'moodboard', command: () => { alert('Show moodboard'); }});\r\n        }\r\n      }\r\n    });\r\n  }\r\n  public createSession(sessionInfo: SessionInfo): void {\r\n    this.cookieService.usingUsername(sessionInfo.username);\r\n    this.retroService.createSession(sessionInfo).subscribe(r => {\r\n      if (! r) {\r\n        console.log('Unable to create session!!');\r\n        this.status = 'Unable to create session';\r\n      } else {\r\n        if (this.retroService.isAdmin()) {\r\n         this.menuItems.push ({label: 'moodboard', command: () => { this.moodboardStatusUpdate(); }});\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public openSession($event: SessionInfo): void {\r\n    switch ($event.state) {\r\n      case SessionConnectType.NEW : this.createSession($event); break;\r\n      case SessionConnectType.EXISTING : this.joinSession($event); break;\r\n    }\r\n  }\r\n\r\n  public addMessage($event): void {\r\n    this.retroService.addMessage($event);\r\n  }\r\n\r\n  public voted($event): void {\r\n    this.retroService.voted($event);\r\n  }\r\n  addNote(colId: number): void {\r\n    this.retroService.addNote(colId);\r\n  }\r\n  sendUpdatedNote(note: RetrospectiveNote): void {\r\n    this.retroService.sendUpdatedNote(note);\r\n  }\r\n  sendEditNote(note: RetrospectiveNote): void {\r\n    this.retroService.sendEditNote(note);\r\n  }\r\n  sendDeleteNote(note: RetrospectiveNote): void {\r\n    this.retroService.sendDeleteNote(note);\r\n  }\r\n  public mergeNotes(notes2Merge: NotesToMerge): void {\r\n    console.log(`Merging note ${notes2Merge.note2MergeId} into note ${notes2Merge.baseNoteId}`);\r\n    console.log(JSON.stringify(notes2Merge));\r\n    this.retroService.mergeNotes(notes2Merge);\r\n  }\r\n  getLinkUrl(): void {\r\n    const result = `${this.baseUrl}?sessionId=${this.retroService.session.id}`;\r\n    this.clipboard.copy(result);\r\n    this.messageService.add({severity: 'success', summary: 'Success', detail: 'Url copied to clipboard'});\r\n  }\r\n  public saveNotes(): void {\r\n    const nodeTexts: string[] = this.retroService.columnData.map(cd => cd.title + '\\n' + cd.notes.map(n => '\\t' + n.txt + '\\n') + '\\n\\n');\r\n    const blob = new Blob(nodeTexts, {type: 'text/plain;charset=utf-8'});\r\n    const filename = 'RetrospectiveNotes_' + moment(Date.now()).format('YYYYMMDD_HHmmss') + '.txt';\r\n    saveAs(blob, filename);\r\n  }\r\n  public myMoodSelection(selection: number): void {\r\n    this.retroService.myMoodSelection(selection);\r\n  }\r\n  public moodboardStatusUpdate(): void {\r\n    this.retroService.moodboardStatusUpdate(this.icons.length);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#auxilaryMenu {\r\n  position: relative;\r\n  top: 0;\r\n  float: right;\r\n}\r\n\r\n.auxilaryMenuButton {\r\n  width: 100%;\r\n}\r\n.auxilaryMenuButton button {\r\n  float:right;\r\n  overflow: visible;\r\n}\r\n\r\n.user-panel {\r\n  flex-grow: 0;\r\n  margin: 15px, 10px, 5px, 10px;\r\n  min-width: 200px;\r\n  max-width: 200px;\r\n}\r\n\r\n.user-panel li {\r\n  font: 16px Arial;\r\n  margin: 2px, 0px, 0px, 0px;\r\n  list-style-type: square;\r\n}\r\n\r\n.collapsed-userpanel {\r\n  width: 20px\r\n}\r\n.exploded-userpanel {\r\n  width: 200px;\r\n}\r\n.retrospective-panel {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  align-items: stretch;\r\n}\r\n\r\n.main-panel {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-content: stretch;\r\n}\r\n\r\n.main-panel > :last-child {\r\n  border-right: solid 1px blue;\r\n}\r\n\r\n.panel-column {\r\n  flex-grow: 1;\r\n  max-width:33%;\r\n  border-left: solid 1px blue;\r\n  padding: 10px 10px  10px 10px;\r\n}\r\n\r\n.controlePanel {\r\n  flex-grow: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: stretch;\r\n  border: 10px white solid;\r\n  min-width: 300px;\r\n  max-width: 300px;\r\n}\r\n\r\n.controlePanel a {\r\n  color: darkblue;\r\n  font-weight: bold;\r\n}\r\n\r\n.retrospective-mainpanel {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: stretch;\r\n  align-content: stretch;\r\n}\r\n\r\n.moodboard {\r\n  flex-grow: 1;\r\n  max-width:25%;\r\n  border-left: solid 1px blue;\r\n  padding: 10px 10px  10px 10px;\r\n}\r\n\r\n.moodboard h2{\r\n  text-align: center;\r\n  border-right: solid 0px transparent;\r\n}\r\n\r\n.mbIcon {\r\n  font-size: 120px;\r\n  color: yellow;\r\n}",
                    "styleUrl": "./retro-session.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "retroService",
                        "type": "RetroSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "ScrumCookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "retroService",
                        "type": "RetroSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clipboard",
                        "type": "Clipboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "ScrumCookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class='auxilaryMenuButton' *ngIf=\"retroService.inSession\">\r\n  <button  id='auxilaryMenu' class=\"pi pi-bars\" (click)=\"auxilaryMenu.toggle($event)\"> </button>\r\n  <p-menu #auxilaryMenu [popup]=true [model]=\"menuItems\"></p-menu>\r\n</div>\r\n<div class=\"retrospective-mainpanel\">\r\n  <app-session-init *ngIf=\"!retroService.inSession\" (onStartSession)=\"openSession($event)\" [sessionId]=\"retroService.session.id\"></app-session-init>\r\n  \r\n  <!-- div *ngIf=\"!retroService.inSession\">\r\n    <label for=\"username\">User Id:</label><input id=\"retro_username\" name=\"username\" type=\"text\" [(ngModel)]=\"retroService.session.user.name\"\r\n      style=\"width: 200px;margin-left: 20px;\"> <br>\r\n    <div class=\"group\">\r\n      <button id=\"new_retro_session\" (click)=\"createSession()\">Create new session</button><br>\r\n    </div>\r\n    <div class=\"group\">\r\n      <label for=\"sessionId\">Session Id:</label><input id=\"retro_session_id\" name=\"sessionId\" type=\"text\" [(ngModel)]=\"retroService.session.id\"\r\n        style=\"width: 200px;margin-left: 20px;\"><br />\r\n      <button id=\"join_retro_session\" (click)=\"joinSession()\">Join existing session</button>\r\n    </div>\r\n  </div -->\r\n  <div class=\"retrospective-panel\" *ngIf=\"retroService.inSession\">\r\n    <div id=\"userPanel\" class=\"user-panel\" >\r\n      <span>Users:</span>\r\n      <ul>\r\n        <li *ngFor=\"let user of retroService.session.users\">\r\n          <span>{{user.name}}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div id=\"retroMainpanel\" class=\"main-panel\">\r\n      <div id=\"moodBoard\" class=\"moodboard\" *ngIf=\"retroService.showMoodboard\"><h2>Moodboard</h2>\r\n        <div *ngFor=\"let icon of icons; let i = index\" style=\"text-align: center;\">\r\n          <fa-icon [icon]=\"icon\" class=\"mbIcon\" (click)=\"myMoodSelection(i)\"></fa-icon><br/>\r\n          <span>cnt: {{retroService.moodboardCounts[i]}}</span>\r\n        </div>\r\n      </div>\r\n      <app-retro-column *ngFor=\"let col of retroService.columnData\" [columnData]=\"col\"  [userId]=\"retroService.session.user.id\" [availableVotes]=\"retroService.availableVotes\"\r\n        (newNoteEvent)=\"addNote(col.column)\" (votedEvent)=\"voted($event)\" (updateNoteEvent)=\"sendUpdatedNote($event)\" (editNoteEvent)=\"sendEditNote($event)\" \r\n        (deleteNoteEvent)=\"sendDeleteNote($event)\" (mergeNotesEvent)=\"mergeNotes($event)\" class=\"panel-column\"></app-retro-column>\r\n    </div>\r\n    <div id=\"controlePanel\" class=\"controlePanel\">\r\n      <div>\r\n        <label>Session: <a (click)=\"getLinkUrl()\" title=\"click to copy the session-url\">{{retroService.session.id}}</a></label><br />\r\n        <label>User: {{retroService.session.user.name}} ({{retroService.session.user.id}})</label><br />\r\n        <label>votes: {{retroService.availableVotes}}</label><br />\r\n      </div>\r\n      <div id=\"messagePanel\"  style=\"flex-grow: 1; border: 1px solid black; padding:4px;margin-bottom: 20px;\">\r\n        <app-messages-view [messageReceived]=\"retroService.newMessage\" (messageEntered)=\"addMessage($event)\"></app-messages-view>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SessionInitComponent",
            "id": "component-SessionInitComponent-746162b74efe8b58845458a475fab5bbdb87748269c4ddac1f06a2d96d6aae712dfc9c1ef01528961bc018b0806eb0f3ab96502282116c25d8d3aa5cd49ac52b",
            "file": "src/app/components/session-init/session-init.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-session-init",
            "styleUrls": [
                "./session-init.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./session-init.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sessionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onStartSession",
                    "defaultValue": "new EventEmitter<SessionInfo>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "disableSessionIdChange",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedRadioButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "sessionInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SessionInfo",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { SessionInfo, SessionConnectType } from '../../model/session-info';\nimport { MessageService } from 'primeng/api';\n\nimport { ScrumCookieService } from '../../service/scrum-cookie.service';\n\n@Component({\n  selector: 'app-session-init',\n  templateUrl: './session-init.component.html',\n  styleUrls: ['./session-init.component.css']\n})\nexport class SessionInitComponent implements OnInit {\n\n  @Output() onStartSession = new EventEmitter<SessionInfo>();\n  @Input()  sessionId: string;\n  \n  sessionInfo: SessionInfo;\n  selectedRadioButton: string;\n  disableSessionIdChange = false;\n\n  constructor(\n    private cookieService: ScrumCookieService,\n    private messageService: MessageService\n    ) { }\n\n  ngOnInit(): void {\n    this.sessionInfo = {username: this.cookieService.getUsername(), sessionId: this.sessionId, state: SessionConnectType.NEW};\n    this.selectedRadioButton = 'new';\n    if (this.sessionId) {\n      this.disableSessionIdChange = true;\n      this.sessionInfo.state = SessionConnectType.EXISTING;\n      this.selectedRadioButton = 'existing';\n    }\n  }\n\n  public openSession(): void {\n    this.sessionInfo.state = this.selectedRadioButton === 'new' ?  SessionConnectType.NEW : SessionConnectType.EXISTING;\n    if (!this.sessionInfo.username || this.sessionInfo.username.trim().length == 0) {\n      this.messageService.add({severity:'error', summary:'Username is empty', detail:'Username has to be entered'});\n    }\n    else if (this.sessionInfo.state === SessionConnectType.EXISTING && (!this.sessionInfo.sessionId || this.sessionInfo.sessionId.trim().length == 0)) {\n      this.messageService.add({severity:'error', summary:'SessionId is empty', detail:'A valid sessionId has to be entered when joining an existing session'});\n      return;\n    } else {\n      this.onStartSession.emit(this.sessionInfo);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    min-width: 250px;\r\n}\r\n\r\nul {\r\n    list-style-type: none;\r\n    padding-left: 5px;\r\n}\r\nli {\r\n    padding-bottom: 5px;\r\n}\r\n    input {\r\n    width: 200px;\r\n    display: inline-block;\r\n}\r\n    label {\r\n    display: inline-block;\r\n    margin: 5px 10px 0 10px;\r\n}\r\n    button {\r\n    margin: 5px 0px 15px 0;\r\n    padding: 5px 10px 5px 10px;\r\n    font-size: larger;\r\n}\r\n    .select-session {\r\n    display: inline-block;\r\n    vertical-align: bottom;\r\n    margin: 20px 20px 0 0;\r\n}\r\n  ",
                    "styleUrl": "./session-init.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "ScrumCookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "ScrumCookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label for=\"username\">User Id:</label>\n<input id=\"planning_username\" name=\"username\" type=\"text\" [(ngModel)]=\"sessionInfo.username\"/> <br>\n<div class=\"select-session\">\n    <ul>\n        <li>\n            <p-radioButton name=\"sessieType\" value=\"new\" [(ngModel)]=\"selectedRadioButton\" inputId=\"new\"></p-radioButton>\n            <label for=\"new\">Create new Session</label>\n        </li>\n        <li>\n            <p-radioButton name=\"sessieType\" value=\"existing\" [(ngModel)]=\"selectedRadioButton\" inputId=\"existing\"></p-radioButton>\n            <label for=\"existing\">Join existing session with id: </label>\n            <input id=\"planning_session_id\" name=\"sessionId\" type=\"text\" [(ngModel)]=\"sessionInfo.sessionId\" [disabled]=\"disableSessionIdChange\"/>\n        </li>\n    </ul>\n    <button id=\"Start\" (click)=\"openSession()\">Start</button>\n</div>\n\n"
        },
        {
            "name": "StatusComponent",
            "id": "component-StatusComponent-09c82a1404456c88db8dcb5520318373ff7a7baae1b726a287d3ddbd9c99c7a7a8b2f2d32fac9e2566e0fa817745a5f9c26c83e20ae99b619f8eafd98f404a81",
            "file": "src/app/components/status/status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status",
            "styleUrls": [
                "./status.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "versionNumber",
                    "defaultValue": "environment.appVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { StatusService } from 'src/app/service/status.service';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-status',\r\n  templateUrl: './status.component.html',\r\n  styleUrls: ['./status.component.css']\r\n})\r\nexport class StatusComponent implements OnInit {\r\n\r\n  public status: Observable<string>;\r\n  versionNumber: string = environment.appVersion;\r\n\r\n  constructor(statusService: StatusService) {\r\n    this.status = statusService.$status;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".status-bar {\r\n  margin: 0;\r\n  align-content: flex-start;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.status-bar p {\r\n  margin: 0;\r\n  flex-grow: 1;\r\n}\r\n.status-bar span {\r\n  margin: 0;\r\n  flex-grow: 0;\r\n  font-size: smaller;\r\n}",
                    "styleUrl": "./status.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"status-bar\">\r\n  <p>{{status | async}}</p><span>Version: {{versionNumber}}</span>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-852743a5126e7eb1fb2d9fae30c666bc520e2f9c6754a212dc682d89f60f880ff8fe4632fc0041876dd2f50f4fe724c06d8af3034ee9f09fe3f999edac3f0ac1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\nimport { TabMenuModule } from 'primeng/tabmenu';\r\nimport { ScrollPanelModule } from 'primeng/scrollpanel';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ChartModule } from 'primeng/chart';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { PrimeIcons } from 'primeng/api';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { MessageService } from 'primeng/api';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { MenuModule } from 'primeng/menu';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { AppRoutingModule } from './app-routing-module';\r\nimport { RetroSessionComponent } from './components/retro-session/retro-session.component';\r\nimport { StatusComponent } from './components/status/status.component';\r\nimport { RetroColumnComponent } from './components/retro-session/retro-column/retro-column.component';\r\nimport { RetroMessageComponent } from './components/retro-session/retro-message/retro-message.component';\r\nimport { CardsViewComponent } from './components/planning-session/cards-view/cards-view.component';\r\nimport { ResultViewComponent } from './components/planning-session/result-view/result-view.component';\r\nimport { PlanningSessionComponent } from './components/planning-session/planning-session.component';\r\nimport { MessagesViewComponent } from './components/messages-view/messages-view.component';\r\nimport { SessionInitComponent } from './components/session-init/session-init.component';\r\nimport { ScrumCookieService } from './service/scrum-cookie.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    RetroSessionComponent,\r\n    StatusComponent,\r\n    RetroColumnComponent,\r\n    RetroMessageComponent,\r\n    PlanningSessionComponent,\r\n    CardsViewComponent,\r\n    ResultViewComponent,\r\n    MessagesViewComponent,\r\n    SessionInitComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    TabMenuModule,\r\n    ScrollPanelModule,\r\n    BrowserAnimationsModule,\r\n    ButtonModule,\r\n    RadioButtonModule,\r\n    ChartModule,\r\n    DialogModule,\r\n    ToastModule,\r\n    MenuModule,\r\n    FontAwesomeModule\r\n  ],\r\n  providers: [PrimeIcons,\r\n    {provide: LocationStrategy, useClass: HashLocationStrategy},\r\n    CookieService,\r\n    MessageService,\r\n    ScrumCookieService\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class AppModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ScrumCookieService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CardsViewComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "MessagesViewComponent"
                        },
                        {
                            "name": "PlanningSessionComponent"
                        },
                        {
                            "name": "ResultViewComponent"
                        },
                        {
                            "name": "RetroColumnComponent"
                        },
                        {
                            "name": "RetroMessageComponent"
                        },
                        {
                            "name": "RetroSessionComponent"
                        },
                        {
                            "name": "SessionInitComponent"
                        },
                        {
                            "name": "StatusComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-75218541a9ccca55f78dfc07b2a4f9c49767d2879e706d85dc235479e55ec803ec77880f1c618a014c756cb01a44b3924e7f37f786c167c7f2174b9dd5d8faa0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing-module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { RetroSessionComponent } from './components/retro-session/retro-session.component';\r\nimport { PlanningSessionComponent } from './components/planning-session/planning-session.component';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'home' },\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'retro', component: RetroSessionComponent },\r\n  { path: 'plan', component: PlanningSessionComponent },\r\n];\r\n\r\n// configures NgModule imports and exports\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  appVersion: require('../../package.json').version,\r\n  production: true,\r\n  CHART_COLORS: ['#FF6384', '#36A2EB', '#FFCE56', '#33cccc', '#33cc33', '#ffff00', '#ff9999', '#0000ff', '#006600', '#996600', '#993399', '#666699'],\r\n  CARD_SYMBOLS: ['½', '1', '2', '3', '5', '8', '13', '20', '40', '100', '?', 'coffee']\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  appVersion: require('../../package.json').version + '-dev',\r\n  production: false,\r\n  CHART_COLORS: ['#FF6384', '#36A2EB', '#FFCE56', '#33cccc', '#33cc33', '#ffff00', '#ff9999', '#0000ff', '#006600', '#996600', '#993399', '#666699'],\r\n  CARD_SYMBOLS: ['½', '1', '2', '3', '5', '8', '13', '20', '40', '100', '?', 'coffee']\r\n}"
            },
            {
                "name": "ExistingSessionInitialization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SessionInit.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NewSessionInitialization",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SessionInit.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SessionInit.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n    props: args\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Role",
                "childs": [
                    {
                        "name": "Unknown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Unknown"
                    },
                    {
                        "name": "ScrumMaster",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ScrumMaster"
                    },
                    {
                        "name": "TeamMember",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TeamMember"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/model/session.ts"
            },
            {
                "name": "SessionConnectType",
                "childs": [
                    {
                        "name": "NEW",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "New"
                    },
                    {
                        "name": "EXISTING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Existing"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/model/session-info.ts"
            },
            {
                "name": "SessionType",
                "childs": [
                    {
                        "name": "UNKNOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UNKNOWN"
                    },
                    {
                        "name": "REFINEMENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "REFINEMENT"
                    },
                    {
                        "name": "RETROSPECTIVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RETROSPECTIVE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/model/session.ts"
            },
            {
                "name": "TabSelected",
                "childs": [
                    {
                        "name": "Home",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Retrospective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "PlanningPoker",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/tab-selected.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  appVersion: require('../../package.json').version,\r\n  production: true,\r\n  CHART_COLORS: ['#FF6384', '#36A2EB', '#FFCE56', '#33cccc', '#33cc33', '#ffff00', '#ff9999', '#0000ff', '#006600', '#996600', '#993399', '#666699'],\r\n  CARD_SYMBOLS: ['½', '1', '2', '3', '5', '8', '13', '20', '40', '100', '?', 'coffee']\r\n}"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  appVersion: require('../../package.json').version + '-dev',\r\n  production: false,\r\n  CHART_COLORS: ['#FF6384', '#36A2EB', '#FFCE56', '#33cccc', '#33cc33', '#ffff00', '#ff9999', '#0000ff', '#006600', '#996600', '#993399', '#666699'],\r\n  CARD_SYMBOLS: ['½', '1', '2', '3', '5', '8', '13', '20', '40', '100', '?', 'coffee']\r\n}"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/stories/SessionInit.stories.ts": [
                {
                    "name": "ExistingSessionInitialization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SessionInit.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NewSessionInitialization",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SessionInit.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SessionInit.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n    props: args\r\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/model/session.ts": [
                {
                    "name": "Role",
                    "childs": [
                        {
                            "name": "Unknown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Unknown"
                        },
                        {
                            "name": "ScrumMaster",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ScrumMaster"
                        },
                        {
                            "name": "TeamMember",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TeamMember"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/model/session.ts"
                },
                {
                    "name": "SessionType",
                    "childs": [
                        {
                            "name": "UNKNOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UNKNOWN"
                        },
                        {
                            "name": "REFINEMENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "REFINEMENT"
                        },
                        {
                            "name": "RETROSPECTIVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RETROSPECTIVE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/model/session.ts"
                }
            ],
            "src/app/model/session-info.ts": [
                {
                    "name": "SessionConnectType",
                    "childs": [
                        {
                            "name": "NEW",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "New"
                        },
                        {
                            "name": "EXISTING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Existing"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/model/session-info.ts"
                }
            ],
            "src/app/shared/tab-selected.ts": [
                {
                    "name": "TabSelected",
                    "childs": [
                        {
                            "name": "Home",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Retrospective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "PlanningPoker",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/tab-selected.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing-module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "home"
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "retro",
                        "component": "RetroSessionComponent"
                    },
                    {
                        "path": "plan",
                        "component": "PlanningSessionComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/messages-view/messages-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessagesViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/messages-view/messages-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/planning-session/cards-view/cards-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardsViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/planning-session/planning-session.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanningSessionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/components/planning-session/result-view/result-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/planning-session/result-view/result-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Counts",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/retro-session/retro-column/retro-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RetroColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/retro-session/retro-message/retro-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RetroMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/components/retro-session/retro-session.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RetroSessionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/components/session-init/session-init.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SessionInitComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/status/status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/model/message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WsMessage",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/model/notes-to-merge.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotesToMerge",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/retrospective-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MoodboardStatus",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/retrospective-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MoodboardUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/model/retrospective-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RetrospectiveColumnData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/model/retrospective-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RetrospectiveNote",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/model/session-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SessionInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/model/session.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Session",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/model/session.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/model/session.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserVotes",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/retro-session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RetroSessionService",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/service/scrum-cookie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScrumCookieService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/service/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionService",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/service/session.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SessionResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatusService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/websocket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/service/websocket.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HandlerSelection",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SessionInit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExistingSessionInitialization",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SessionInit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NewSessionInitialization",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SessionInit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/mocks/MessageServiceMock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/mocks/SrcumCookieServiceMock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScrumCookieServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}